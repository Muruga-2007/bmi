{"file_contents":{"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/pages/DietPlan.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { motion } from \"framer-motion\";\nimport {\n  Utensils,\n  Clock,\n  Flame,\n  Apple,\n  Coffee,\n  Sun,\n  Sunset,\n  Moon,\n  ChefHat,\n  TrendingUp,\n  Heart,\n  Droplets,\n  Activity,\n  ShoppingCart,\n  CalendarDays,\n  Zap,\n  Check,\n  Timer\n} from \"lucide-react\";\n\ntype DietCategory = \"underweight\" | \"normal\" | \"overweight\" | \"obese\";\n\nexport default function DietPlan() {\n  const [selectedCategory, setSelectedCategory] = useState<DietCategory>(\"normal\");\n\n  const dietPlans = {\n    underweight: {\n      title: \"Weight Gain Diet Plan\",\n      description: \"Nutrient-dense, calorie-rich foods for healthy weight gain\",\n      color: \"text-blue-500\",\n      bgColor: \"bg-blue-500/10\",\n      borderColor: \"border-blue-500/20\",\n      calories: \"2500-3000\",\n      icon: TrendingUp,\n      meals: [\n        {\n          name: \"Breakfast\",\n          time: \"7:00 AM - 8:00 AM\",\n          icon: Coffee,\n          calories: 600,\n          items: [\n            { name: \"3 whole eggs (scrambled/omelette)\", protein: \"21g\", carbs: \"2g\", fats: \"15g\" },\n            { name: \"2 slices whole grain toast with peanut butter\", protein: \"12g\", carbs: \"30g\", fats: \"16g\" },\n            { name: \"1 banana\", protein: \"1g\", carbs: \"27g\", fats: \"0g\" },\n            { name: \"1 glass whole milk (250ml)\", protein: \"8g\", carbs: \"12g\", fats: \"8g\" },\n          ],\n        },\n        {\n          name: \"Mid-Morning Snack\",\n          time: \"10:00 AM\",\n          icon: Apple,\n          calories: 400,\n          items: [\n            { name: \"Mixed nuts (almonds, cashews, walnuts) - 1/4 cup\", protein: \"7g\", carbs: \"9g\", fats: \"18g\" },\n            { name: \"Dried fruits (dates, raisins)\", protein: \"1g\", carbs: \"30g\", fats: \"0g\" },\n            { name: \"Protein smoothie\", protein: \"25g\", carbs: \"35g\", fats: \"5g\" },\n          ],\n        },\n        {\n          name: \"Lunch\",\n          time: \"12:30 PM - 1:30 PM\",\n          icon: Sun,\n          calories: 800,\n          items: [\n            { name: \"Brown rice or whole wheat roti - 2 cups\", protein: \"10g\", carbs: \"90g\", fats: \"4g\" },\n            { name: \"Grilled chicken/fish/paneer - 200g\", protein: \"40g\", carbs: \"0g\", fats: \"10g\" },\n            { name: \"Mixed vegetable curry\", protein: \"5g\", carbs: \"20g\", fats: \"8g\" },\n            { name: \"1 cup yogurt\", protein: \"10g\", carbs: \"12g\", fats: \"8g\" },\n          ],\n        },\n        {\n          name: \"Evening Snack\",\n          time: \"4:00 PM - 5:00 PM\",\n          icon: Sunset,\n          calories: 450,\n          items: [\n            { name: \"Cheese sandwich (2 slices)\", protein: \"15g\", carbs: \"28g\", fats: \"12g\" },\n            { name: \"Fresh fruit juice\", protein: \"2g\", carbs: \"26g\", fats: \"0g\" },\n            { name: \"Handful of trail mix\", protein: \"5g\", carbs: \"15g\", fats: \"10g\" },\n          ],\n        },\n        {\n          name: \"Dinner\",\n          time: \"7:30 PM - 8:30 PM\",\n          icon: Moon,\n          calories: 700,\n          items: [\n            { name: \"Quinoa or brown rice - 1.5 cups\", protein: \"12g\", carbs: \"75g\", fats: \"6g\" },\n            { name: \"Lean protein (fish/chicken/tofu) - 200g\", protein: \"40g\", carbs: \"0g\", fats: \"10g\" },\n            { name: \"Roasted vegetables\", protein: \"4g\", carbs: \"15g\", fats: \"5g\" },\n            { name: \"Avocado salad\", protein: \"3g\", carbs: \"12g\", fats: \"15g\" },\n          ],\n        },\n        {\n          name: \"Before Bed\",\n          time: \"10:00 PM\",\n          icon: Moon,\n          calories: 300,\n          items: [\n            { name: \"Casein protein shake or warm milk\", protein: \"25g\", carbs: \"10g\", fats: \"5g\" },\n            { name: \"Small bowl of oats with honey\", protein: \"6g\", carbs: \"40g\", fats: \"3g\" },\n          ],\n        },\n      ],\n      tips: [\n        \"Eat every 2-3 hours to increase calorie intake\",\n        \"Include healthy fats like nuts, seeds, and avocados\",\n        \"Add protein powder to smoothies and shakes\",\n        \"Focus on strength training to build muscle mass\",\n        \"Avoid skipping meals\",\n        \"Stay hydrated with 8-10 glasses of water\",\n      ],\n    },\n    normal: {\n      title: \"Balanced Maintenance Diet\",\n      description: \"Maintain your healthy weight with balanced nutrition\",\n      color: \"text-green-500\",\n      bgColor: \"bg-green-500/10\",\n      borderColor: \"border-green-500/20\",\n      calories: \"2000-2200\",\n      icon: Heart,\n      meals: [\n        {\n          name: \"Breakfast\",\n          time: \"7:00 AM - 8:00 AM\",\n          icon: Coffee,\n          calories: 450,\n          items: [\n            { name: \"Oatmeal with berries and honey\", protein: \"10g\", carbs: \"45g\", fats: \"8g\" },\n            { name: \"2 boiled eggs\", protein: \"14g\", carbs: \"1g\", fats: \"10g\" },\n            { name: \"1 glass low-fat milk or green tea\", protein: \"8g\", carbs: \"12g\", fats: \"2g\" },\n          ],\n        },\n        {\n          name: \"Mid-Morning Snack\",\n          time: \"10:30 AM\",\n          icon: Apple,\n          calories: 200,\n          items: [\n            { name: \"Apple or orange\", protein: \"1g\", carbs: \"25g\", fats: \"0g\" },\n            { name: \"Small handful of almonds (10-12)\", protein: \"6g\", carbs: \"6g\", fats: \"14g\" },\n          ],\n        },\n        {\n          name: \"Lunch\",\n          time: \"1:00 PM - 2:00 PM\",\n          icon: Sun,\n          calories: 600,\n          items: [\n            { name: \"Brown rice or whole wheat roti - 1.5 cups\", protein: \"8g\", carbs: \"68g\", fats: \"3g\" },\n            { name: \"Grilled chicken/fish/lentils - 150g\", protein: \"30g\", carbs: \"15g\", fats: \"5g\" },\n            { name: \"Mixed vegetable salad\", protein: \"3g\", carbs: \"10g\", fats: \"2g\" },\n            { name: \"Buttermilk or yogurt\", protein: \"8g\", carbs: \"10g\", fats: \"4g\" },\n          ],\n        },\n        {\n          name: \"Evening Snack\",\n          time: \"5:00 PM\",\n          icon: Sunset,\n          calories: 250,\n          items: [\n            { name: \"Whole grain crackers with hummus\", protein: \"5g\", carbs: \"20g\", fats: \"8g\" },\n            { name: \"Green tea\", protein: \"0g\", carbs: \"0g\", fats: \"0g\" },\n            { name: \"Carrot/cucumber sticks\", protein: \"1g\", carbs: \"5g\", fats: \"0g\" },\n          ],\n        },\n        {\n          name: \"Dinner\",\n          time: \"7:00 PM - 8:00 PM\",\n          icon: Moon,\n          calories: 550,\n          items: [\n            { name: \"Grilled vegetables\", protein: \"4g\", carbs: \"15g\", fats: \"3g\" },\n            { name: \"Lean protein (fish/chicken/tofu) - 150g\", protein: \"30g\", carbs: \"0g\", fats: \"8g\" },\n            { name: \"Quinoa or brown rice - 1 cup\", protein: \"8g\", carbs: \"50g\", fats: \"4g\" },\n            { name: \"Green salad\", protein: \"2g\", carbs: \"8g\", fats: \"2g\" },\n          ],\n        },\n      ],\n      tips: [\n        \"Maintain regular meal times\",\n        \"Stay hydrated with 8-10 glasses of water daily\",\n        \"Include variety of colorful vegetables\",\n        \"Exercise 150 minutes per week\",\n        \"Get 7-9 hours of quality sleep\",\n        \"Practice mindful eating\",\n      ],\n    },\n    overweight: {\n      title: \"Weight Loss Diet Plan\",\n      description: \"Create a sustainable calorie deficit for healthy weight loss\",\n      color: \"text-orange-500\",\n      bgColor: \"bg-orange-500/10\",\n      borderColor: \"border-orange-500/20\",\n      calories: \"1500-1800\",\n      icon: Activity,\n      meals: [\n        {\n          name: \"Breakfast\",\n          time: \"7:00 AM - 8:00 AM\",\n          icon: Coffee,\n          calories: 350,\n          items: [\n            { name: \"Vegetable omelette (2 eggs)\", protein: \"14g\", carbs: \"5g\", fats: \"10g\" },\n            { name: \"1 slice whole grain toast\", protein: \"4g\", carbs: \"15g\", fats: \"1g\" },\n            { name: \"Green tea or black coffee\", protein: \"0g\", carbs: \"0g\", fats: \"0g\" },\n          ],\n        },\n        {\n          name: \"Mid-Morning Snack\",\n          time: \"10:30 AM\",\n          icon: Apple,\n          calories: 150,\n          items: [\n            { name: \"Greek yogurt with berries\", protein: \"10g\", carbs: \"15g\", fats: \"3g\" },\n            { name: \"Herbal tea\", protein: \"0g\", carbs: \"0g\", fats: \"0g\" },\n          ],\n        },\n        {\n          name: \"Lunch\",\n          time: \"1:00 PM - 2:00 PM\",\n          icon: Sun,\n          calories: 450,\n          items: [\n            { name: \"Large mixed salad with olive oil dressing\", protein: \"5g\", carbs: \"15g\", fats: \"10g\" },\n            { name: \"Grilled chicken/fish - 120g\", protein: \"25g\", carbs: \"0g\", fats: \"5g\" },\n            { name: \"1/2 cup brown rice or quinoa\", protein: \"4g\", carbs: \"25g\", fats: \"2g\" },\n          ],\n        },\n        {\n          name: \"Evening Snack\",\n          time: \"4:30 PM\",\n          icon: Sunset,\n          calories: 120,\n          items: [\n            { name: \"Cucumber and celery sticks\", protein: \"1g\", carbs: \"5g\", fats: \"0g\" },\n            { name: \"Small apple\", protein: \"0g\", carbs: \"15g\", fats: \"0g\" },\n            { name: \"Green tea\", protein: \"0g\", carbs: \"0g\", fats: \"0g\" },\n          ],\n        },\n        {\n          name: \"Dinner\",\n          time: \"7:00 PM\",\n          icon: Moon,\n          calories: 400,\n          items: [\n            { name: \"Vegetable soup\", protein: \"4g\", carbs: \"15g\", fats: \"2g\" },\n            { name: \"Grilled fish or tofu - 120g\", protein: \"25g\", carbs: \"0g\", fats: \"5g\" },\n            { name: \"Steamed vegetables\", protein: \"3g\", carbs: \"10g\", fats: \"1g\" },\n            { name: \"Small portion of brown rice (optional)\", protein: \"2g\", carbs: \"20g\", fats: \"1g\" },\n          ],\n        },\n      ],\n      tips: [\n        \"Reduce portion sizes gradually\",\n        \"Avoid sugary drinks and processed foods\",\n        \"Drink water before meals\",\n        \"Incorporate cardio and strength training\",\n        \"Track your food intake\",\n        \"Aim for 0.5-1kg weight loss per week\",\n      ],\n    },\n    obese: {\n      title: \"Medical Weight Management Plan\",\n      description: \"Comprehensive approach to significant weight reduction\",\n      color: \"text-red-500\",\n      bgColor: \"bg-red-500/10\",\n      borderColor: \"border-red-500/20\",\n      calories: \"1200-1500\",\n      icon: ChefHat,\n      meals: [\n        {\n          name: \"Breakfast\",\n          time: \"7:00 AM - 8:00 AM\",\n          icon: Coffee,\n          calories: 280,\n          items: [\n            { name: \"Egg white omelette with spinach\", protein: \"12g\", carbs: \"3g\", fats: \"2g\" },\n            { name: \"1/2 cup oatmeal\", protein: \"3g\", carbs: \"20g\", fats: \"2g\" },\n            { name: \"Green tea\", protein: \"0g\", carbs: \"0g\", fats: \"0g\" },\n          ],\n        },\n        {\n          name: \"Mid-Morning Snack\",\n          time: \"10:00 AM\",\n          icon: Apple,\n          calories: 100,\n          items: [\n            { name: \"Small portion of berries\", protein: \"1g\", carbs: \"12g\", fats: \"0g\" },\n            { name: \"Herbal tea\", protein: \"0g\", carbs: \"0g\", fats: \"0g\" },\n          ],\n        },\n        {\n          name: \"Lunch\",\n          time: \"12:30 PM - 1:30 PM\",\n          icon: Sun,\n          calories: 400,\n          items: [\n            { name: \"Large vegetable salad\", protein: \"4g\", carbs: \"12g\", fats: \"5g\" },\n            { name: \"Grilled chicken breast - 100g\", protein: \"25g\", carbs: \"0g\", fats: \"3g\" },\n            { name: \"1/3 cup brown rice\", protein: \"2g\", carbs: \"15g\", fats: \"1g\" },\n          ],\n        },\n        {\n          name: \"Afternoon Snack\",\n          time: \"3:30 PM\",\n          icon: Sunset,\n          calories: 80,\n          items: [\n            { name: \"Cucumber slices\", protein: \"1g\", carbs: \"4g\", fats: \"0g\" },\n            { name: \"Green tea\", protein: \"0g\", carbs: \"0g\", fats: \"0g\" },\n          ],\n        },\n        {\n          name: \"Dinner\",\n          time: \"6:30 PM\",\n          icon: Moon,\n          calories: 350,\n          items: [\n            { name: \"Clear vegetable soup\", protein: \"3g\", carbs: \"10g\", fats: \"1g\" },\n            { name: \"Steamed fish or tofu - 100g\", protein: \"22g\", carbs: \"0g\", fats: \"4g\" },\n            { name: \"Steamed broccoli and carrots\", protein: \"4g\", carbs: \"15g\", fats: \"0g\" },\n          ],\n        },\n      ],\n      tips: [\n        \"Consult with a registered dietitian\",\n        \"Start with low-impact exercises (walking, swimming)\",\n        \"Monitor blood sugar and blood pressure regularly\",\n        \"Eliminate processed foods and added sugars\",\n        \"Join a support group for accountability\",\n        \"Consider working with a healthcare team\",\n        \"Set realistic, achievable goals\",\n      ],\n    },\n  };\n\n  const currentPlan = dietPlans[selectedCategory];\n  const Icon = currentPlan.icon;\n\n  return (\n    <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"mb-8 text-center\"\n      >\n        <h1 className=\"font-heading text-4xl sm:text-5xl font-bold mb-4 bg-gradient-to-r from-primary to-chart-2 bg-clip-text text-transparent\">\n          Personalized Diet Plans\n        </h1>\n        <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto\">\n          Science-backed nutrition plans tailored to your BMI category and health goals\n        </p>\n      </motion.div>\n\n      <div className=\"mb-8 flex flex-wrap gap-3 justify-center\">\n        {(Object.keys(dietPlans) as DietCategory[]).map((category) => {\n          const plan = dietPlans[category];\n          const PlanIcon = plan.icon;\n          return (\n            <Button\n              key={category}\n              onClick={() => setSelectedCategory(category)}\n              variant={selectedCategory === category ? \"default\" : \"outline\"}\n              className={`${selectedCategory === category ? plan.bgColor : \"\"} capitalize`}\n              data-testid={`button-category-${category}`}\n            >\n              <PlanIcon className=\"h-4 w-4 mr-2\" />\n              {category}\n            </Button>\n          );\n        })}\n      </div>\n\n      <motion.div\n        key={selectedCategory}\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3 }}\n      >\n        <Card className={`mb-8 border-2 ${currentPlan.borderColor}`}>\n          <CardHeader className={`${currentPlan.bgColor}`}>\n            <div className=\"flex items-start justify-between flex-wrap gap-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className={`p-3 rounded-xl bg-background`}>\n                  <Icon className={`h-8 w-8 ${currentPlan.color}`} />\n                </div>\n                <div>\n                  <CardTitle className=\"font-heading text-3xl\" data-testid=\"text-plan-title\">{currentPlan.title}</CardTitle>\n                  <CardDescription className=\"text-base mt-1\">{currentPlan.description}</CardDescription>\n                </div>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Flame className={`h-5 w-5 ${currentPlan.color}`} />\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Daily Calories</p>\n                  <p className={`text-xl font-bold ${currentPlan.color}`} data-testid=\"text-calories\">{currentPlan.calories}</p>\n                </div>\n              </div>\n            </div>\n          </CardHeader>\n        </Card>\n\n        <Tabs defaultValue=\"meals\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-2 lg:grid-cols-6 lg:w-auto\">\n            <TabsTrigger value=\"meals\" className=\"flex items-center gap-2\" data-testid=\"tab-meals\">\n              <Utensils className=\"h-4 w-4\" />\n              Meal Plan\n            </TabsTrigger>\n            <TabsTrigger value=\"recipes\" className=\"flex items-center gap-2\" data-testid=\"tab-recipes\">\n              <ChefHat className=\"h-4 w-4\" />\n              Recipes\n            </TabsTrigger>\n            <TabsTrigger value=\"shopping\" className=\"flex items-center gap-2\" data-testid=\"tab-shopping\">\n              <ShoppingCart className=\"h-4 w-4\" />\n              Shopping List\n            </TabsTrigger>\n            <TabsTrigger value=\"mealprep\" className=\"flex items-center gap-2\" data-testid=\"tab-mealprep\">\n              <CalendarDays className=\"h-4 w-4\" />\n              Meal Prep\n            </TabsTrigger>\n            <TabsTrigger value=\"exercise\" className=\"flex items-center gap-2\" data-testid=\"tab-exercise\">\n              <Activity className=\"h-4 w-4\" />\n              Workouts\n            </TabsTrigger>\n            <TabsTrigger value=\"tips\" className=\"flex items-center gap-2\" data-testid=\"tab-tips\">\n              <Heart className=\"h-4 w-4\" />\n              Health Tips\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"meals\" className=\"space-y-6\">\n            {currentPlan.meals.map((meal, index) => {\n              const MealIcon = meal.icon;\n              return (\n                <motion.div\n                  key={meal.name}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ delay: index * 0.1 }}\n                >\n                  <Card className=\"overflow-hidden hover-elevate\">\n                    <CardHeader className={`${currentPlan.bgColor}`}>\n                      <div className=\"flex items-center justify-between flex-wrap gap-4\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"p-2 rounded-lg bg-background\">\n                            <MealIcon className={`h-6 w-6 ${currentPlan.color}`} />\n                          </div>\n                          <div>\n                            <CardTitle className=\"text-xl\" data-testid={`text-meal-${index}`}>{meal.name}</CardTitle>\n                            <div className=\"flex items-center gap-2 mt-1\">\n                              <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                              <CardDescription>{meal.time}</CardDescription>\n                            </div>\n                          </div>\n                        </div>\n                        <Badge variant=\"secondary\" className=\"text-base px-3 py-1\">\n                          <Flame className=\"h-4 w-4 mr-1\" />\n                          {meal.calories} kcal\n                        </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"pt-6\">\n                      <div className=\"space-y-3\">\n                        {meal.items.map((item, itemIndex) => (\n                          <div\n                            key={itemIndex}\n                            className=\"flex items-start justify-between gap-4 p-3 rounded-lg bg-muted/50 hover-elevate\"\n                            data-testid={`meal-item-${index}-${itemIndex}`}\n                          >\n                            <div className=\"flex-1\">\n                              <p className=\"font-medium\">{item.name}</p>\n                            </div>\n                            <div className=\"flex gap-3 text-xs\">\n                              <Badge variant=\"outline\" className=\"font-mono\">P: {item.protein}</Badge>\n                              <Badge variant=\"outline\" className=\"font-mono\">C: {item.carbs}</Badge>\n                              <Badge variant=\"outline\" className=\"font-mono\">F: {item.fats}</Badge>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </motion.div>\n              );\n            })}\n          </TabsContent>\n\n          <TabsContent value=\"recipes\" className=\"space-y-6\" data-testid=\"content-recipes\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <ChefHat className={`h-6 w-6 ${currentPlan.color}`} />\n                  Quick & Healthy Recipes\n                </CardTitle>\n                <CardDescription>\n                  Easy-to-follow recipes tailored for {selectedCategory} diet plan\n                </CardDescription>\n              </CardHeader>\n              <CardContent data-testid=\"recipes-content\">\n                <Accordion type=\"single\" collapsible className=\"w-full\" data-testid=\"accordion-recipes\">\n                  <AccordionItem value=\"recipe-1\" data-testid=\"recipe-item-1\">\n                    <AccordionTrigger className=\"text-lg font-semibold\" data-testid=\"recipe-trigger-1\">\n                      <div className=\"flex items-center gap-3\">\n                        <Timer className={`h-5 w-5 ${currentPlan.color}`} />\n                        High-Protein Breakfast Bowl\n                      </div>\n                    </AccordionTrigger>\n                    <AccordionContent>\n                      <div className=\"space-y-4 pt-2\">\n                        <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                          <Badge variant=\"outline\"><Clock className=\"h-3 w-3 mr-1\" />15 mins</Badge>\n                          <Badge variant=\"outline\"><Flame className=\"h-3 w-3 mr-1\" />450 kcal</Badge>\n                        </div>\n                        <div>\n                          <h4 className=\"font-semibold mb-2\">Ingredients:</h4>\n                          <ul className=\"list-disc list-inside space-y-1 text-sm\">\n                            <li>2 eggs</li>\n                            <li>1 cup spinach</li>\n                            <li>1/2 avocado</li>\n                            <li>1 slice whole grain toast</li>\n                            <li>Cherry tomatoes</li>\n                            <li>Salt, pepper, olive oil</li>\n                          </ul>\n                        </div>\n                        <div>\n                          <h4 className=\"font-semibold mb-2\">Instructions:</h4>\n                          <ol className=\"list-decimal list-inside space-y-2 text-sm\">\n                            <li>Heat olive oil in a pan over medium heat</li>\n                            <li>Sauté spinach until wilted, season with salt and pepper</li>\n                            <li>Scramble eggs in the same pan</li>\n                            <li>Toast bread and top with mashed avocado</li>\n                            <li>Serve eggs with spinach, toast, and fresh tomatoes</li>\n                          </ol>\n                        </div>\n                      </div>\n                    </AccordionContent>\n                  </AccordionItem>\n\n                  <AccordionItem value=\"recipe-2\" data-testid=\"recipe-item-2\">\n                    <AccordionTrigger className=\"text-lg font-semibold\" data-testid=\"recipe-trigger-2\">\n                      <div className=\"flex items-center gap-3\">\n                        <Timer className={`h-5 w-5 ${currentPlan.color}`} />\n                        Grilled Chicken & Veggie Bowl\n                      </div>\n                    </AccordionTrigger>\n                    <AccordionContent>\n                      <div className=\"space-y-4 pt-2\">\n                        <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                          <Badge variant=\"outline\"><Clock className=\"h-3 w-3 mr-1\" />25 mins</Badge>\n                          <Badge variant=\"outline\"><Flame className=\"h-3 w-3 mr-1\" />550 kcal</Badge>\n                        </div>\n                        <div>\n                          <h4 className=\"font-semibold mb-2\">Ingredients:</h4>\n                          <ul className=\"list-disc list-inside space-y-1 text-sm\">\n                            <li>150g chicken breast</li>\n                            <li>1 cup brown rice (cooked)</li>\n                            <li>Mixed vegetables (broccoli, carrots, bell peppers)</li>\n                            <li>2 tbsp olive oil</li>\n                            <li>Lemon juice, garlic, herbs</li>\n                          </ul>\n                        </div>\n                        <div>\n                          <h4 className=\"font-semibold mb-2\">Instructions:</h4>\n                          <ol className=\"list-decimal list-inside space-y-2 text-sm\">\n                            <li>Marinate chicken with olive oil, lemon juice, garlic for 10 mins</li>\n                            <li>Grill chicken until fully cooked (6-7 mins each side)</li>\n                            <li>Steam or roast vegetables until tender</li>\n                            <li>Serve chicken sliced over rice with vegetables</li>\n                            <li>Drizzle with extra lemon juice and herbs</li>\n                          </ol>\n                        </div>\n                      </div>\n                    </AccordionContent>\n                  </AccordionItem>\n\n                  <AccordionItem value=\"recipe-3\" data-testid=\"recipe-item-3\">\n                    <AccordionTrigger className=\"text-lg font-semibold\" data-testid=\"recipe-trigger-3\">\n                      <div className=\"flex items-center gap-3\">\n                        <Timer className={`h-5 w-5 ${currentPlan.color}`} />\n                        Protein-Packed Smoothie\n                      </div>\n                    </AccordionTrigger>\n                    <AccordionContent>\n                      <div className=\"space-y-4 pt-2\">\n                        <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                          <Badge variant=\"outline\"><Clock className=\"h-3 w-3 mr-1\" />5 mins</Badge>\n                          <Badge variant=\"outline\"><Flame className=\"h-3 w-3 mr-1\" />320 kcal</Badge>\n                        </div>\n                        <div>\n                          <h4 className=\"font-semibold mb-2\">Ingredients:</h4>\n                          <ul className=\"list-disc list-inside space-y-1 text-sm\">\n                            <li>1 scoop protein powder</li>\n                            <li>1 banana</li>\n                            <li>1 cup almond milk</li>\n                            <li>1 tbsp peanut butter</li>\n                            <li>Handful of spinach</li>\n                            <li>Ice cubes</li>\n                          </ul>\n                        </div>\n                        <div>\n                          <h4 className=\"font-semibold mb-2\">Instructions:</h4>\n                          <ol className=\"list-decimal list-inside space-y-2 text-sm\">\n                            <li>Add all ingredients to blender</li>\n                            <li>Blend on high until smooth and creamy</li>\n                            <li>Add more milk if too thick</li>\n                            <li>Pour into glass and enjoy immediately</li>\n                          </ol>\n                        </div>\n                      </div>\n                    </AccordionContent>\n                  </AccordionItem>\n                </Accordion>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"shopping\" className=\"space-y-6\" data-testid=\"content-shopping\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <ShoppingCart className={`h-6 w-6 ${currentPlan.color}`} />\n                  Weekly Grocery Shopping List\n                </CardTitle>\n                <CardDescription>\n                  Complete shopping list for {selectedCategory} diet plan\n                </CardDescription>\n              </CardHeader>\n              <CardContent data-testid=\"shopping-list-content\">\n                <div className=\"grid gap-6 md:grid-cols-2\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center gap-2 mb-3\">\n                      <Apple className={`h-5 w-5 ${currentPlan.color}`} />\n                      <h3 className=\"font-semibold text-lg\">Proteins</h3>\n                    </div>\n                    <div className=\"space-y-2\">\n                      {[\n                        \"Chicken breast (1kg)\",\n                        \"Salmon fillets (500g)\",\n                        \"Eggs (1 dozen)\",\n                        \"Greek yogurt (500g)\",\n                        \"Tofu (400g)\",\n                        \"Protein powder\"\n                      ].map((item, i) => (\n                        <div key={i} className=\"flex items-center gap-2 p-2 rounded-lg bg-muted/50\">\n                          <Check className=\"h-4 w-4 text-muted-foreground\" />\n                          <span className=\"text-sm\">{item}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center gap-2 mb-3\">\n                      <Utensils className={`h-5 w-5 ${currentPlan.color}`} />\n                      <h3 className=\"font-semibold text-lg\">Grains & Carbs</h3>\n                    </div>\n                    <div className=\"space-y-2\">\n                      {[\n                        \"Brown rice (1kg)\",\n                        \"Whole grain bread\",\n                        \"Oatmeal (500g)\",\n                        \"Quinoa (500g)\",\n                        \"Sweet potatoes (1kg)\",\n                        \"Whole wheat pasta\"\n                      ].map((item, i) => (\n                        <div key={i} className=\"flex items-center gap-2 p-2 rounded-lg bg-muted/50\">\n                          <Check className=\"h-4 w-4 text-muted-foreground\" />\n                          <span className=\"text-sm\">{item}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center gap-2 mb-3\">\n                      <Heart className={`h-5 w-5 ${currentPlan.color}`} />\n                      <h3 className=\"font-semibold text-lg\">Vegetables</h3>\n                    </div>\n                    <div className=\"space-y-2\">\n                      {[\n                        \"Spinach (bunch)\",\n                        \"Broccoli (2 heads)\",\n                        \"Carrots (1kg)\",\n                        \"Bell peppers (assorted)\",\n                        \"Tomatoes (1kg)\",\n                        \"Mixed salad greens\"\n                      ].map((item, i) => (\n                        <div key={i} className=\"flex items-center gap-2 p-2 rounded-lg bg-muted/50\">\n                          <Check className=\"h-4 w-4 text-muted-foreground\" />\n                          <span className=\"text-sm\">{item}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center gap-2 mb-3\">\n                      <Zap className={`h-5 w-5 ${currentPlan.color}`} />\n                      <h3 className=\"font-semibold text-lg\">Healthy Fats</h3>\n                    </div>\n                    <div className=\"space-y-2\">\n                      {[\n                        \"Avocados (4)\",\n                        \"Almonds (250g)\",\n                        \"Olive oil\",\n                        \"Peanut butter\",\n                        \"Walnuts (200g)\",\n                        \"Chia seeds\"\n                      ].map((item, i) => (\n                        <div key={i} className=\"flex items-center gap-2 p-2 rounded-lg bg-muted/50\">\n                          <Check className=\"h-4 w-4 text-muted-foreground\" />\n                          <span className=\"text-sm\">{item}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"mealprep\" className=\"space-y-6\" data-testid=\"content-mealprep\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <CalendarDays className={`h-6 w-6 ${currentPlan.color}`} />\n                  Weekly Meal Prep Guide\n                </CardTitle>\n                <CardDescription>\n                  Plan and prepare meals in advance for {selectedCategory} diet success\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\" data-testid=\"mealprep-content\">\n                <div className={`p-4 rounded-lg ${currentPlan.bgColor} border ${currentPlan.borderColor}`}>\n                  <h3 className=\"font-semibold mb-3 flex items-center gap-2\">\n                    <Timer className={`h-5 w-5 ${currentPlan.color}`} />\n                    Sunday Prep Session (2-3 hours)\n                  </h3>\n                  <div className=\"grid gap-4 sm:grid-cols-2\">\n                    <div className=\"bg-background/50 p-3 rounded-lg\">\n                      <h4 className=\"font-medium mb-2\">Proteins</h4>\n                      <ul className=\"space-y-1 text-sm\">\n                        <li className=\"flex items-start gap-2\">\n                          <Check className=\"h-4 w-4 mt-0.5 text-green-500\" />\n                          <span>Grill 6 chicken breasts</span>\n                        </li>\n                        <li className=\"flex items-start gap-2\">\n                          <Check className=\"h-4 w-4 mt-0.5 text-green-500\" />\n                          <span>Boil 12 eggs for quick snacks</span>\n                        </li>\n                        <li className=\"flex items-start gap-2\">\n                          <Check className=\"h-4 w-4 mt-0.5 text-green-500\" />\n                          <span>Prepare portion sizes of tofu</span>\n                        </li>\n                      </ul>\n                    </div>\n                    <div className=\"bg-background/50 p-3 rounded-lg\">\n                      <h4 className=\"font-medium mb-2\">Carbs & Grains</h4>\n                      <ul className=\"space-y-1 text-sm\">\n                        <li className=\"flex items-start gap-2\">\n                          <Check className=\"h-4 w-4 mt-0.5 text-green-500\" />\n                          <span>Cook large batch of brown rice</span>\n                        </li>\n                        <li className=\"flex items-start gap-2\">\n                          <Check className=\"h-4 w-4 mt-0.5 text-green-500\" />\n                          <span>Prepare overnight oats for 3 days</span>\n                        </li>\n                        <li className=\"flex items-start gap-2\">\n                          <Check className=\"h-4 w-4 mt-0.5 text-green-500\" />\n                          <span>Roast sweet potatoes</span>\n                        </li>\n                      </ul>\n                    </div>\n                    <div className=\"bg-background/50 p-3 rounded-lg\">\n                      <h4 className=\"font-medium mb-2\">Vegetables</h4>\n                      <ul className=\"space-y-1 text-sm\">\n                        <li className=\"flex items-start gap-2\">\n                          <Check className=\"h-4 w-4 mt-0.5 text-green-500\" />\n                          <span>Wash and chop all vegetables</span>\n                        </li>\n                        <li className=\"flex items-start gap-2\">\n                          <Check className=\"h-4 w-4 mt-0.5 text-green-500\" />\n                          <span>Steam broccoli and carrots</span>\n                        </li>\n                        <li className=\"flex items-start gap-2\">\n                          <Check className=\"h-4 w-4 mt-0.5 text-green-500\" />\n                          <span>Prepare salad containers</span>\n                        </li>\n                      </ul>\n                    </div>\n                    <div className=\"bg-background/50 p-3 rounded-lg\">\n                      <h4 className=\"font-medium mb-2\">Snacks & Extras</h4>\n                      <ul className=\"space-y-1 text-sm\">\n                        <li className=\"flex items-start gap-2\">\n                          <Check className=\"h-4 w-4 mt-0.5 text-green-500\" />\n                          <span>Portion nuts into containers</span>\n                        </li>\n                        <li className=\"flex items-start gap-2\">\n                          <Check className=\"h-4 w-4 mt-0.5 text-green-500\" />\n                          <span>Prep fruit boxes for week</span>\n                        </li>\n                        <li className=\"flex items-start gap-2\">\n                          <Check className=\"h-4 w-4 mt-0.5 text-green-500\" />\n                          <span>Make protein smoothie packs</span>\n                        </li>\n                      </ul>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <h3 className=\"font-semibold flex items-center gap-2\">\n                    <Utensils className={`h-5 w-5 ${currentPlan.color}`} />\n                    Meal Prep Tips\n                  </h3>\n                  <div className=\"grid gap-3 sm:grid-cols-2\">\n                    <div className=\"p-3 rounded-lg bg-muted/50\">\n                      <h4 className=\"font-medium text-sm mb-1\">Storage</h4>\n                      <p className=\"text-xs text-muted-foreground\">Use airtight containers and label with dates. Most prepped meals last 3-4 days refrigerated.</p>\n                    </div>\n                    <div className=\"p-3 rounded-lg bg-muted/50\">\n                      <h4 className=\"font-medium text-sm mb-1\">Variety</h4>\n                      <p className=\"text-xs text-muted-foreground\">Rotate proteins and vegetables throughout the week to avoid flavor fatigue.</p>\n                    </div>\n                    <div className=\"p-3 rounded-lg bg-muted/50\">\n                      <h4 className=\"font-medium text-sm mb-1\">Freezing</h4>\n                      <p className=\"text-xs text-muted-foreground\">Freeze extra portions for later. Soups, grains, and proteins freeze well.</p>\n                    </div>\n                    <div className=\"p-3 rounded-lg bg-muted/50\">\n                      <h4 className=\"font-medium text-sm mb-1\">Time Saving</h4>\n                      <p className=\"text-xs text-muted-foreground\">Cook multiple items simultaneously using oven, stovetop, and slow cooker.</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"exercise\" className=\"space-y-6\" data-testid=\"content-exercise\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Activity className={`h-6 w-6 ${currentPlan.color}`} />\n                  Personalized Exercise Program\n                </CardTitle>\n                <CardDescription>\n                  Evidence-based workout routines for {selectedCategory} BMI category\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\" data-testid=\"exercise-content\">\n                <div className={`p-4 rounded-lg ${currentPlan.bgColor} border ${currentPlan.borderColor}`}>\n                  <h3 className=\"font-semibold mb-3 text-lg\">Weekly Workout Split</h3>\n                  <div className=\"grid gap-3 sm:grid-cols-2 lg:grid-cols-3\">\n                    {[\n                      { day: \"Monday\", focus: \"Upper Body Strength\", duration: \"45 mins\" },\n                      { day: \"Tuesday\", focus: \"Cardio & Core\", duration: \"30 mins\" },\n                      { day: \"Wednesday\", focus: \"Lower Body Strength\", duration: \"45 mins\" },\n                      { day: \"Thursday\", focus: \"Active Recovery (Yoga/Walking)\", duration: \"30 mins\" },\n                      { day: \"Friday\", focus: \"Full Body Circuit\", duration: \"40 mins\" },\n                      { day: \"Weekend\", focus: \"Outdoor Activity or Rest\", duration: \"varies\" }\n                    ].map((workout, i) => (\n                      <div key={i} className=\"bg-background/80 p-3 rounded-lg\">\n                        <h4 className=\"font-medium mb-1\">{workout.day}</h4>\n                        <p className=\"text-sm text-muted-foreground\">{workout.focus}</p>\n                        <Badge variant=\"outline\" className=\"mt-2 text-xs\">\n                          <Clock className=\"h-3 w-3 mr-1\" />\n                          {workout.duration}\n                        </Badge>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"font-semibold text-lg flex items-center gap-2\">\n                    <Zap className={`h-5 w-5 ${currentPlan.color}`} />\n                    Sample Workouts\n                  </h3>\n                  <Accordion type=\"single\" collapsible className=\"w-full\" data-testid=\"accordion-workouts\">\n                    <AccordionItem value=\"workout-1\" data-testid=\"workout-item-1\">\n                      <AccordionTrigger className=\"text-base font-semibold\" data-testid=\"workout-trigger-1\">\n                        <div className=\"flex items-center gap-3\">\n                          <Activity className={`h-5 w-5 ${currentPlan.color}`} />\n                          Upper Body Strength Routine\n                        </div>\n                      </AccordionTrigger>\n                      <AccordionContent>\n                        <div className=\"space-y-4 pt-2\">\n                          <div className=\"flex items-center gap-4 text-sm\">\n                            <Badge variant=\"outline\"><Timer className=\"h-3 w-3 mr-1\" />45 minutes</Badge>\n                            <Badge variant=\"outline\"><Flame className=\"h-3 w-3 mr-1\" />350-450 calories</Badge>\n                          </div>\n                          <div className=\"space-y-3\">\n                            <div className=\"p-3 rounded-lg bg-muted/50\">\n                              <h4 className=\"font-medium mb-1\">Warm-up (5 mins)</h4>\n                              <p className=\"text-sm text-muted-foreground\">Arm circles, shoulder rolls, light cardio</p>\n                            </div>\n                            {[\n                              { exercise: \"Push-ups\", sets: \"3 sets\", reps: \"10-15 reps\", rest: \"60s\" },\n                              { exercise: \"Dumbbell Rows\", sets: \"3 sets\", reps: \"12 reps each arm\", rest: \"60s\" },\n                              { exercise: \"Overhead Press\", sets: \"3 sets\", reps: \"10-12 reps\", rest: \"60s\" },\n                              { exercise: \"Bicep Curls\", sets: \"3 sets\", reps: \"12-15 reps\", rest: \"45s\" },\n                              { exercise: \"Tricep Dips\", sets: \"3 sets\", reps: \"10-12 reps\", rest: \"45s\" },\n                              { exercise: \"Plank\", sets: \"3 sets\", reps: \"30-60 seconds\", rest: \"30s\" }\n                            ].map((ex, i) => (\n                              <div key={i} className=\"flex items-center justify-between p-3 rounded-lg bg-muted/50\">\n                                <div>\n                                  <p className=\"font-medium\">{ex.exercise}</p>\n                                  <p className=\"text-xs text-muted-foreground\">{ex.sets} × {ex.reps}</p>\n                                </div>\n                                <Badge variant=\"secondary\" className=\"text-xs\">Rest: {ex.rest}</Badge>\n                              </div>\n                            ))}\n                            <div className=\"p-3 rounded-lg bg-muted/50\">\n                              <h4 className=\"font-medium mb-1\">Cool-down (5 mins)</h4>\n                              <p className=\"text-sm text-muted-foreground\">Upper body stretches, deep breathing</p>\n                            </div>\n                          </div>\n                        </div>\n                      </AccordionContent>\n                    </AccordionItem>\n\n                    <AccordionItem value=\"workout-2\" data-testid=\"workout-item-2\">\n                      <AccordionTrigger className=\"text-base font-semibold\" data-testid=\"workout-trigger-2\">\n                        <div className=\"flex items-center gap-3\">\n                          <Activity className={`h-5 w-5 ${currentPlan.color}`} />\n                          Cardio & Core Circuit\n                        </div>\n                      </AccordionTrigger>\n                      <AccordionContent>\n                        <div className=\"space-y-4 pt-2\">\n                          <div className=\"flex items-center gap-4 text-sm\">\n                            <Badge variant=\"outline\"><Timer className=\"h-3 w-3 mr-1\" />30 minutes</Badge>\n                            <Badge variant=\"outline\"><Flame className=\"h-3 w-3 mr-1\" />300-400 calories</Badge>\n                          </div>\n                          <div className=\"space-y-3\">\n                            <div className=\"p-3 rounded-lg bg-muted/50\">\n                              <h4 className=\"font-medium mb-1\">Format: HIIT (High-Intensity Interval Training)</h4>\n                              <p className=\"text-sm text-muted-foreground\">30 seconds work, 30 seconds rest, repeat 3 rounds</p>\n                            </div>\n                            {[\n                              { exercise: \"Jumping Jacks\", benefit: \"Full body warm-up\" },\n                              { exercise: \"Mountain Climbers\", benefit: \"Core & cardio\" },\n                              { exercise: \"Burpees\", benefit: \"Full body power\" },\n                              { exercise: \"High Knees\", benefit: \"Cardio endurance\" },\n                              { exercise: \"Bicycle Crunches\", benefit: \"Obliques & core\" },\n                              { exercise: \"Plank Jacks\", benefit: \"Core stability\" },\n                              { exercise: \"Jump Squats\", benefit: \"Lower body power\" },\n                              { exercise: \"Russian Twists\", benefit: \"Core rotation\" }\n                            ].map((ex, i) => (\n                              <div key={i} className=\"flex items-center justify-between p-3 rounded-lg bg-muted/50\">\n                                <div>\n                                  <p className=\"font-medium\">{ex.exercise}</p>\n                                  <p className=\"text-xs text-muted-foreground\">{ex.benefit}</p>\n                                </div>\n                                <Badge variant=\"secondary\" className=\"text-xs\">30s on/off</Badge>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      </AccordionContent>\n                    </AccordionItem>\n\n                    <AccordionItem value=\"workout-3\" data-testid=\"workout-item-3\">\n                      <AccordionTrigger className=\"text-base font-semibold\" data-testid=\"workout-trigger-3\">\n                        <div className=\"flex items-center gap-3\">\n                          <Activity className={`h-5 w-5 ${currentPlan.color}`} />\n                          Lower Body Power Workout\n                        </div>\n                      </AccordionTrigger>\n                      <AccordionContent>\n                        <div className=\"space-y-4 pt-2\">\n                          <div className=\"flex items-center gap-4 text-sm\">\n                            <Badge variant=\"outline\"><Timer className=\"h-3 w-3 mr-1\" />45 minutes</Badge>\n                            <Badge variant=\"outline\"><Flame className=\"h-3 w-3 mr-1\" />400-500 calories</Badge>\n                          </div>\n                          <div className=\"space-y-3\">\n                            <div className=\"p-3 rounded-lg bg-muted/50\">\n                              <h4 className=\"font-medium mb-1\">Warm-up (5 mins)</h4>\n                              <p className=\"text-sm text-muted-foreground\">Leg swings, bodyweight squats, lunges</p>\n                            </div>\n                            {[\n                              { exercise: \"Squats\", sets: \"4 sets\", reps: \"12-15 reps\", rest: \"90s\" },\n                              { exercise: \"Lunges\", sets: \"3 sets\", reps: \"10 each leg\", rest: \"60s\" },\n                              { exercise: \"Romanian Deadlifts\", sets: \"3 sets\", reps: \"12 reps\", rest: \"90s\" },\n                              { exercise: \"Glute Bridges\", sets: \"3 sets\", reps: \"15-20 reps\", rest: \"60s\" },\n                              { exercise: \"Calf Raises\", sets: \"3 sets\", reps: \"15-20 reps\", rest: \"45s\" },\n                              { exercise: \"Wall Sit\", sets: \"3 sets\", reps: \"45-60 seconds\", rest: \"60s\" }\n                            ].map((ex, i) => (\n                              <div key={i} className=\"flex items-center justify-between p-3 rounded-lg bg-muted/50\">\n                                <div>\n                                  <p className=\"font-medium\">{ex.exercise}</p>\n                                  <p className=\"text-xs text-muted-foreground\">{ex.sets} × {ex.reps}</p>\n                                </div>\n                                <Badge variant=\"secondary\" className=\"text-xs\">Rest: {ex.rest}</Badge>\n                              </div>\n                            ))}\n                            <div className=\"p-3 rounded-lg bg-muted/50\">\n                              <h4 className=\"font-medium mb-1\">Cool-down (5 mins)</h4>\n                              <p className=\"text-sm text-muted-foreground\">Quad stretches, hamstring stretches, hip flexor stretches</p>\n                            </div>\n                          </div>\n                        </div>\n                      </AccordionContent>\n                    </AccordionItem>\n                  </Accordion>\n                </div>\n\n                <div className=\"grid gap-4 sm:grid-cols-2\">\n                  <div className={`p-4 rounded-lg border ${currentPlan.borderColor} ${currentPlan.bgColor}`}>\n                    <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                      <Heart className={`h-5 w-5 ${currentPlan.color}`} />\n                      Progressive Overload\n                    </h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Gradually increase weights, reps, or intensity every 1-2 weeks to continue seeing results and building strength.\n                    </p>\n                  </div>\n                  <div className={`p-4 rounded-lg border ${currentPlan.borderColor} ${currentPlan.bgColor}`}>\n                    <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                      <Clock className={`h-5 w-5 ${currentPlan.color}`} />\n                      Rest & Recovery\n                    </h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Allow 48 hours between training the same muscle group. Quality sleep and proper nutrition are essential for muscle recovery.\n                    </p>\n                  </div>\n                  <div className={`p-4 rounded-lg border ${currentPlan.borderColor} ${currentPlan.bgColor}`}>\n                    <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                      <Droplets className={`h-5 w-5 ${currentPlan.color}`} />\n                      Hydration\n                    </h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Drink water before, during, and after workouts. Aim for 500ml extra for every 30 minutes of intense exercise.\n                    </p>\n                  </div>\n                  <div className={`p-4 rounded-lg border ${currentPlan.borderColor} ${currentPlan.bgColor}`}>\n                    <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                      <Zap className={`h-5 w-5 ${currentPlan.color}`} />\n                      Form Over Weight\n                    </h4>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Always prioritize proper form over lifting heavier weights. Poor form increases injury risk and reduces effectiveness.\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"tips\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Heart className={`h-6 w-6 ${currentPlan.color}`} />\n                  Health & Nutrition Tips\n                </CardTitle>\n                <CardDescription>\n                  Expert recommendations for your {selectedCategory} diet plan\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid gap-4 sm:grid-cols-2\">\n                  {currentPlan.tips.map((tip, index) => (\n                    <motion.div\n                      key={index}\n                      initial={{ opacity: 0, x: -20 }}\n                      animate={{ opacity: 1, x: 0 }}\n                      transition={{ delay: index * 0.1 }}\n                      className=\"flex items-start gap-3 p-4 rounded-lg bg-muted/50 hover-elevate\"\n                      data-testid={`tip-${index}`}\n                    >\n                      <div className={`p-2 rounded-full ${currentPlan.bgColor} mt-1`}>\n                        <Droplets className={`h-4 w-4 ${currentPlan.color}`} />\n                      </div>\n                      <p className=\"flex-1 text-sm\">{tip}</p>\n                    </motion.div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":53929},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/Footer.tsx":{"content":"import { Heart, Sparkles, Code } from \"lucide-react\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"w-full border-t bg-card mt-auto\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"flex flex-col items-center gap-4 text-center\">\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <span>Designed by</span>\n            <span className=\"font-heading font-semibold text-foreground\">Fina</span>\n            <span className=\"text-primary\">|</span>\n            <span className=\"flex items-center gap-1\">\n              Empowered by <Sparkles className=\"h-3 w-3 text-primary\" /> AI\n            </span>\n            <span className=\"text-primary\">|</span>\n            <span className=\"flex items-center gap-1\">\n              Built for the <Heart className=\"h-3 w-3 text-destructive fill-destructive\" /> Future\n            </span>\n          </div>\n          <p className=\"text-xs text-muted-foreground\" data-testid=\"text-copyright\">\n            © 2025 BMI Insight. Transforming health through intelligence.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":1171},"replit.md":{"content":"# BMI Insight - AI-Powered Health Calculator\n\n## Overview\n\nBMI Insight is an AI-enhanced Body Mass Index calculator that transforms clinical BMI calculations into an empowering health insight experience. The application provides personalized diet recommendations, health insights, and visualizations to help users understand and manage their body health. Built with a focus on clean design inspired by Apple Health's minimalism and Calm App's soothing aesthetic, the platform offers both light and dark themes with carefully crafted color palettes.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework & Build Tools:**\n- React 18+ with TypeScript for type-safe component development\n- Vite as the build tool and development server\n- Wouter for lightweight client-side routing\n- TanStack React Query for server state management and data fetching\n\n**UI Component System:**\n- shadcn/ui component library (New York style variant) with Radix UI primitives\n- Tailwind CSS for utility-first styling with custom design tokens\n- Framer Motion for smooth animations and transitions\n- Three.js for 3D human model visualization of BMI categories\n\n**Design System:**\n- CSS variables-based theming system supporting light/dark modes\n- Custom color palette with primary (blue-teal), secondary (green), and category-specific colors\n- Typography stack: Poppins for headings, Inter for body text\n- Gradient system for visual hierarchy and category indicators\n\n**State Management:**\n- React Context API for theme management (ThemeProvider)\n- TanStack Query for asynchronous server state\n- Local component state with React hooks\n\n### Backend Architecture\n\n**Server Framework:**\n- Express.js with TypeScript for REST API endpoints\n- ESM module system throughout the application\n- Custom middleware for request logging and error handling\n\n**API Structure:**\n- `/api/users` - User registration and retrieval endpoints\n- `/api/users/by-email/:email` - Fetch user by email\n- `/api/bmi/calculate` - BMI calculation with diet recommendations\n- Diet plan generation based on BMI category and activity level\n\n**Data Validation:**\n- Zod schemas for runtime type validation\n- drizzle-zod integration for database schema validation\n- Custom validation for BMI calculations and user inputs\n\n### Database Architecture\n\n**ORM & Database:**\n- Drizzle ORM for type-safe database operations\n- PostgreSQL via Neon serverless database\n- WebSocket connection pooling for efficient database access\n\n**Schema Design:**\n- `users` table: Stores user profiles (id, name, email, age, gender, createdAt)\n- `bmiRecords` table: Historical BMI calculations with foreign key to users (id, userId, height, weight, bmi, category, activityLevel, createdAt)\n- One-to-many relationship: Users → BMI Records\n\n**Data Storage Layer:**\n- Storage abstraction pattern with IStorage interface\n- DatabaseStorage implementation for all database operations\n- Methods for user management and BMI record tracking\n\n### Design Patterns\n\n**Component Architecture:**\n- Compound component pattern for complex UI elements (Cards, Forms, Dialogs)\n- Presentational/Container component separation\n- Custom hooks for reusable logic (use-mobile, use-toast)\n\n**Code Organization:**\n- Path aliases (@/ for client, @shared for shared types, @assets for static files)\n- Shared schema between client and server for type safety\n- Component examples directory for isolated development/testing\n\n**Routing Strategy:**\n- File-based page organization under `/pages`\n- Client-side routing with Wouter\n- Routes: Home (/), Calculator (/calculator), Diet Plan (/diet-plan), Insights (/insights), About (/about)\n\n## External Dependencies\n\n### Third-Party Services\n\n**Database:**\n- Neon Serverless PostgreSQL (@neondatabase/serverless) - Cloud PostgreSQL with WebSocket support\n- Connection pooling via ws library for WebSocket connections\n- Environment variable DATABASE_URL for connection string\n\n**AI/ML (Planned):**\n- Design mentions AI-powered insights and recommendations\n- OpenAI integration indicated in package.json (@types/openai likely)\n- AI tips generation for personalized health recommendations\n\n### Key Libraries & Frameworks\n\n**Frontend:**\n- React & React DOM 18+\n- @tanstack/react-query for data fetching\n- Radix UI component primitives (20+ components)\n- Framer Motion for animations\n- Three.js for 3D visualizations\n- Recharts for data visualization\n- Wouter for routing\n- date-fns for date manipulation\n\n**Backend:**\n- Express.js for HTTP server\n- Drizzle ORM with PostgreSQL dialect\n- Zod for schema validation\n- connect-pg-simple for session management (indicated)\n\n**Development Tools:**\n- TypeScript for type safety\n- ESBuild for production builds\n- Vite with React plugin\n- Replit-specific plugins (dev-banner, cartographer, runtime-error-modal)\n- Tailwind CSS with PostCSS and Autoprefixer\n\n**UI/Styling:**\n- Tailwind CSS 3.x\n- class-variance-authority for component variants\n- clsx & tailwind-merge for className utilities\n- Custom CSS variables for theming\n\n### Build & Deployment\n\n**Scripts:**\n- `dev`: Development server with tsx for TypeScript execution\n- `build`: Vite frontend build + ESBuild server bundle\n- `start`: Production server execution\n- `db:push`: Drizzle schema push to database\n\n**Configuration:**\n- Vite config with path aliases and Replit-specific plugins\n- Tailwind config with custom theme extensions\n- TypeScript strict mode with ESNext modules\n- Drizzle config pointing to Neon PostgreSQL","size_bytes":5536},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/InsightsCard.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Sparkles, CheckCircle2 } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\ntype Insight = {\n  title: string;\n  description: string;\n  tips: string[];\n};\n\ntype InsightsCardProps = {\n  insight: Insight;\n};\n\nexport default function InsightsCard({ insight }: InsightsCardProps) {\n  return (\n    <Card className=\"w-full border-primary/20\" data-testid=\"card-insights\">\n      <CardHeader>\n        <div className=\"flex items-center gap-2 mb-2\">\n          <div className=\"p-2 rounded-lg bg-primary/10\">\n            <Sparkles className=\"h-5 w-5 text-primary\" />\n          </div>\n          <Badge variant=\"secondary\" className=\"font-heading\">\n            AI-Powered\n          </Badge>\n        </div>\n        <CardTitle className=\"font-heading text-2xl\">{insight.title}</CardTitle>\n        <CardDescription>{insight.description}</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"p-4 rounded-lg bg-gradient-to-br from-primary/5 to-chart-2/5 border border-primary/10\">\n          <h4 className=\"font-heading font-semibold mb-3 flex items-center gap-2\">\n            Weekly Health Tips\n          </h4>\n          <ul className=\"space-y-3\">\n            {insight.tips.map((tip, index) => (\n              <motion.li\n                key={index}\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: 1, x: 0 }}\n                transition={{ duration: 0.3, delay: index * 0.1 }}\n                className=\"flex items-start gap-3\"\n                data-testid={`text-weekly-tip-${index}`}\n              >\n                <div className=\"mt-0.5 flex-shrink-0 p-1 rounded-full bg-chart-2/20\">\n                  <CheckCircle2 className=\"h-4 w-4 text-chart-2\" />\n                </div>\n                <span className=\"text-sm leading-relaxed\">{tip}</span>\n              </motion.li>\n            ))}\n          </ul>\n        </div>\n\n        <div className=\"p-4 rounded-lg bg-muted/50 text-sm text-muted-foreground\">\n          <p>\n            These personalized recommendations are generated based on your BMI,\n            activity level, and health goals. Consult with healthcare\n            professionals for medical advice.\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2416},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/components/examples/InsightsCard.tsx":{"content":"import InsightsCard from \"../InsightsCard\";\n\nexport default function InsightsCardExample() {\n  return (\n    <div className=\"min-h-screen bg-background p-8\">\n      <InsightsCard\n        insight={{\n          title: \"Your Weekly Health Insight\",\n          description: \"Based on your BMI of 24.2, here's your personalized wellness plan\",\n          tips: [\n            \"Focus on maintaining your current healthy weight range\",\n            \"Incorporate strength training 2-3 times per week to build lean muscle\",\n            \"Add more colorful vegetables to each meal for better micronutrient intake\",\n            \"Practice mindful eating to maintain awareness of hunger and fullness cues\",\n            \"Consider meal prepping on weekends to ensure consistent healthy choices\",\n          ],\n        }}\n      />\n    </div>\n  );\n}\n","size_bytes":824},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertBmiRecordSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // User registration endpoint\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(userData.email as string);\n      if (existingUser) {\n        return res.status(400).json({ error: \"User with this email already exists\" });\n      }\n      \n      const user = await storage.createUser(userData);\n      res.json(user);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create user\" });\n    }\n  });\n\n  // Get user by email\n  app.get(\"/api/users/by-email/:email\", async (req, res) => {\n    try {\n      const user = await storage.getUserByEmail(req.params.email);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch user\" });\n    }\n  });\n\n  // Calculate BMI and save record\n  app.post(\"/api/bmi/calculate\", async (req, res) => {\n    try {\n      const recordData = insertBmiRecordSchema.parse(req.body);\n      const bmiRecord = await storage.createBmiRecord(recordData);\n      \n      // Get diet recommendations based on BMI category\n      const dietPlan = getDietRecommendations(recordData.category as string, recordData.activityLevel as string);\n      \n      res.json({\n        bmiRecord,\n        dietPlan,\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to calculate BMI\" });\n    }\n  });\n\n  // Get user's BMI history\n  app.get(\"/api/bmi/history/:userId\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      const history = await storage.getUserBmiHistory(userId);\n      res.json(history);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch BMI history\" });\n    }\n  });\n\n  // Get latest BMI record for user\n  app.get(\"/api/bmi/latest/:userId\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      const record = await storage.getLatestBmiRecord(userId);\n      \n      if (!record) {\n        return res.status(404).json({ error: \"No BMI records found\" });\n      }\n      \n      const dietPlan = getDietRecommendations(record.category, record.activityLevel);\n      \n      res.json({\n        bmiRecord: record,\n        dietPlan,\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch latest BMI\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n// Helper function to generate diet recommendations based on BMI category\nfunction getDietRecommendations(category: string, activityLevel: string) {\n  const basePlans = {\n    underweight: {\n      title: \"Weight Gain Diet Plan\",\n      description: \"Focus on nutrient-dense, calorie-rich foods to gain healthy weight\",\n      dailyCalories: \"2500-3000 calories\",\n      meals: [\n        {\n          name: \"Breakfast\",\n          time: \"7:00 AM - 8:00 AM\",\n          items: [\n            \"3 whole eggs (scrambled/omelette)\",\n            \"2 slices whole grain toast with peanut butter\",\n            \"1 banana\",\n            \"1 glass whole milk\",\n          ],\n        },\n        {\n          name: \"Mid-Morning Snack\",\n          time: \"10:00 AM\",\n          items: [\n            \"Mixed nuts (almonds, cashews, walnuts) - 1/4 cup\",\n            \"Dried fruits\",\n            \"Protein smoothie\",\n          ],\n        },\n        {\n          name: \"Lunch\",\n          time: \"12:30 PM - 1:30 PM\",\n          items: [\n            \"Brown rice or whole wheat roti - 2 cups\",\n            \"Grilled chicken/fish/paneer - 200g\",\n            \"Mixed vegetable curry\",\n            \"1 cup yogurt\",\n          ],\n        },\n        {\n          name: \"Evening Snack\",\n          time: \"4:00 PM - 5:00 PM\",\n          items: [\n            \"Cheese sandwich\",\n            \"Fresh fruit juice\",\n            \"Handful of trail mix\",\n          ],\n        },\n        {\n          name: \"Dinner\",\n          time: \"7:30 PM - 8:30 PM\",\n          items: [\n            \"Quinoa or brown rice - 1.5 cups\",\n            \"Lean protein (fish/chicken/tofu) - 200g\",\n            \"Roasted vegetables\",\n            \"Avocado salad\",\n          ],\n        },\n        {\n          name: \"Before Bed\",\n          time: \"10:00 PM\",\n          items: [\n            \"Casein protein shake or warm milk\",\n            \"A small bowl of oats with honey\",\n          ],\n        },\n      ],\n      tips: [\n        \"Eat every 2-3 hours to increase calorie intake\",\n        \"Include healthy fats like nuts, seeds, and avocados\",\n        \"Add protein powder to smoothies and shakes\",\n        \"Focus on strength training to build muscle mass\",\n        \"Avoid skipping meals\",\n      ],\n    },\n    normal: {\n      title: \"Balanced Maintenance Diet\",\n      description: \"Maintain your healthy weight with balanced nutrition\",\n      dailyCalories: \"2000-2200 calories\",\n      meals: [\n        {\n          name: \"Breakfast\",\n          time: \"7:00 AM - 8:00 AM\",\n          items: [\n            \"Oatmeal with berries and honey\",\n            \"2 boiled eggs\",\n            \"1 glass low-fat milk or green tea\",\n          ],\n        },\n        {\n          name: \"Mid-Morning Snack\",\n          time: \"10:30 AM\",\n          items: [\n            \"Apple or orange\",\n            \"Small handful of almonds\",\n          ],\n        },\n        {\n          name: \"Lunch\",\n          time: \"1:00 PM - 2:00 PM\",\n          items: [\n            \"Brown rice or whole wheat roti - 1.5 cups\",\n            \"Grilled chicken/fish/lentils - 150g\",\n            \"Mixed vegetable salad\",\n            \"Buttermilk or yogurt\",\n          ],\n        },\n        {\n          name: \"Evening Snack\",\n          time: \"5:00 PM\",\n          items: [\n            \"Whole grain crackers with hummus\",\n            \"Green tea\",\n            \"Carrot/cucumber sticks\",\n          ],\n        },\n        {\n          name: \"Dinner\",\n          time: \"7:00 PM - 8:00 PM\",\n          items: [\n            \"Grilled vegetables\",\n            \"Lean protein (fish/chicken/tofu) - 150g\",\n            \"Quinoa or brown rice - 1 cup\",\n            \"Green salad\",\n          ],\n        },\n      ],\n      tips: [\n        \"Maintain regular meal times\",\n        \"Stay hydrated with 8-10 glasses of water daily\",\n        \"Include variety of colorful vegetables\",\n        \"Exercise 150 minutes per week\",\n        \"Get 7-9 hours of quality sleep\",\n      ],\n    },\n    overweight: {\n      title: \"Weight Loss Diet Plan\",\n      description: \"Create a sustainable calorie deficit for healthy weight loss\",\n      dailyCalories: \"1500-1800 calories\",\n      meals: [\n        {\n          name: \"Breakfast\",\n          time: \"7:00 AM - 8:00 AM\",\n          items: [\n            \"Vegetable omelette (2 eggs)\",\n            \"1 slice whole grain toast\",\n            \"Green tea or black coffee\",\n          ],\n        },\n        {\n          name: \"Mid-Morning Snack\",\n          time: \"10:30 AM\",\n          items: [\n            \"Greek yogurt with berries\",\n            \"Herbal tea\",\n          ],\n        },\n        {\n          name: \"Lunch\",\n          time: \"1:00 PM - 2:00 PM\",\n          items: [\n            \"Large mixed salad with olive oil dressing\",\n            \"Grilled chicken/fish - 120g\",\n            \"1/2 cup brown rice or quinoa\",\n          ],\n        },\n        {\n          name: \"Evening Snack\",\n          time: \"4:30 PM\",\n          items: [\n            \"Cucumber and celery sticks\",\n            \"Small apple\",\n            \"Green tea\",\n          ],\n        },\n        {\n          name: \"Dinner\",\n          time: \"7:00 PM\",\n          items: [\n            \"Vegetable soup\",\n            \"Grilled fish or tofu - 120g\",\n            \"Steamed vegetables\",\n            \"Small portion of brown rice (optional)\",\n          ],\n        },\n      ],\n      tips: [\n        \"Reduce portion sizes gradually\",\n        \"Avoid sugary drinks and processed foods\",\n        \"Drink water before meals\",\n        \"Incorporate cardio and strength training\",\n        \"Track your food intake\",\n        \"Aim for 0.5-1kg weight loss per week\",\n      ],\n    },\n    obese: {\n      title: \"Medical Weight Management Plan\",\n      description: \"Comprehensive approach to significant weight reduction\",\n      dailyCalories: \"1200-1500 calories (consult healthcare provider)\",\n      meals: [\n        {\n          name: \"Breakfast\",\n          time: \"7:00 AM - 8:00 AM\",\n          items: [\n            \"Egg white omelette with spinach\",\n            \"1/2 cup oatmeal\",\n            \"Green tea\",\n          ],\n        },\n        {\n          name: \"Mid-Morning Snack\",\n          time: \"10:00 AM\",\n          items: [\n            \"Small portion of berries\",\n            \"Herbal tea\",\n          ],\n        },\n        {\n          name: \"Lunch\",\n          time: \"12:30 PM - 1:30 PM\",\n          items: [\n            \"Large vegetable salad\",\n            \"Grilled chicken breast - 100g\",\n            \"1/3 cup brown rice\",\n          ],\n        },\n        {\n          name: \"Afternoon Snack\",\n          time: \"3:30 PM\",\n          items: [\n            \"Cucumber slices\",\n            \"Green tea\",\n          ],\n        },\n        {\n          name: \"Dinner\",\n          time: \"6:30 PM\",\n          items: [\n            \"Clear vegetable soup\",\n            \"Steamed fish or tofu - 100g\",\n            \"Steamed broccoli and carrots\",\n          ],\n        },\n      ],\n      tips: [\n        \"Consult with a registered dietitian\",\n        \"Start with low-impact exercises (walking, swimming)\",\n        \"Monitor blood sugar and blood pressure regularly\",\n        \"Eliminate processed foods and added sugars\",\n        \"Join a support group for accountability\",\n        \"Consider working with a healthcare team\",\n        \"Set realistic, achievable goals\",\n      ],\n    },\n  };\n\n  const activityMultipliers: Record<string, number> = {\n    sedentary: 1.0,\n    light: 1.1,\n    moderate: 1.2,\n    active: 1.3,\n    \"very-active\": 1.4,\n  };\n\n  const plan = basePlans[category as keyof typeof basePlans] || basePlans.normal;\n  const multiplier = activityMultipliers[activityLevel] || 1.0;\n\n  // Adjust calories based on activity level\n  const calorieRange = plan.dailyCalories.match(/\\d+/g);\n  if (calorieRange && calorieRange.length >= 2) {\n    const min = Math.round(parseInt(calorieRange[0]) * multiplier);\n    const max = Math.round(parseInt(calorieRange[1]) * multiplier);\n    plan.dailyCalories = `${min}-${max} calories (adjusted for ${activityLevel} activity)`;\n  }\n\n  return plan;\n}\n","size_bytes":10996},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/pages/Home.tsx":{"content":"import Hero from \"@/components/Hero\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen\">\n      <Hero />\n    </div>\n  );\n}\n","size_bytes":151},"client/src/components/examples/Header.tsx":{"content":"import Header from \"../Header\";\nimport { ThemeProvider } from \"../ThemeProvider\";\nimport { Router } from \"wouter\";\n\nexport default function HeaderExample() {\n  return (\n    <ThemeProvider>\n      <Router>\n        <div className=\"min-h-screen bg-background\">\n          <Header />\n          <div className=\"p-8\">\n            <p className=\"text-muted-foreground\">Header component with navigation and theme toggle</p>\n          </div>\n        </div>\n      </Router>\n    </ThemeProvider>\n  );\n}\n","size_bytes":489},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport Header from \"@/components/Header\";\nimport Footer from \"@/components/Footer\";\nimport Home from \"@/pages/Home\";\nimport Calculator from \"@/pages/Calculator\";\nimport DietPlan from \"@/pages/DietPlan\";\nimport Insights from \"@/pages/Insights\";\nimport Progress from \"@/pages/Progress\";\nimport About from \"@/pages/About\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/calculator\" component={Calculator} />\n      <Route path=\"/diet-plan\" component={DietPlan} />\n      <Route path=\"/insights\" component={Insights} />\n      <Route path=\"/progress\" component={Progress} />\n      <Route path=\"/about\" component={About} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <div className=\"flex flex-col min-h-screen\">\n            <Header />\n            <main className=\"flex-1\">\n              <Router />\n            </main>\n            <Footer />\n          </div>\n          <Toaster />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1548},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/examples/AboutSection.tsx":{"content":"import AboutSection from \"../AboutSection\";\n\nexport default function AboutSectionExample() {\n  return (\n    <div className=\"min-h-screen bg-background p-8\">\n      <AboutSection />\n    </div>\n  );\n}\n","size_bytes":198},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/examples/Footer.tsx":{"content":"import Footer from \"../Footer\";\n\nexport default function FooterExample() {\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      <div className=\"flex-1 p-8\">\n        <p className=\"text-muted-foreground\">Page content above footer</p>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":307},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/Header.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Moon, Sun, Activity } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"./ThemeProvider\";\n\nexport default function Header() {\n  const { theme, toggleTheme } = useTheme();\n  const [location] = useLocation();\n\n  const navItems = [\n    { path: \"/\", label: \"Home\" },\n    { path: \"/calculator\", label: \"Calculator\" },\n    { path: \"/diet-plan\", label: \"Diet Plans\" },\n    { path: \"/progress\", label: \"Progress\" },\n    { path: \"/insights\", label: \"Insights\" },\n    { path: \"/about\", label: \"About\" },\n  ];\n\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex h-16 items-center justify-between\">\n          <Link href=\"/\" className=\"flex items-center gap-2 hover-elevate rounded-md px-3 py-2\">\n            <Activity className=\"h-6 w-6 text-primary\" data-testid=\"icon-logo\" />\n            <span className=\"font-heading text-xl font-bold bg-gradient-to-r from-primary to-chart-2 bg-clip-text text-transparent\" data-testid=\"text-logo\">\n              BMI Insight\n            </span>\n          </Link>\n\n          <nav className=\"hidden md:flex items-center gap-1\">\n            {navItems.map((item) => (\n              <Link key={item.path} href={item.path}>\n                <Button\n                  variant={location === item.path ? \"secondary\" : \"ghost\"}\n                  size=\"sm\"\n                  data-testid={`link-${item.label.toLowerCase().replace(/ /g, '-')}`}\n                >\n                  {item.label}\n                </Button>\n              </Link>\n            ))}\n          </nav>\n\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={toggleTheme}\n            data-testid=\"button-theme-toggle\"\n          >\n            {theme === \"light\" ? (\n              <Moon className=\"h-5 w-5\" />\n            ) : (\n              <Sun className=\"h-5 w-5\" />\n            )}\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2155},"client/src/pages/Insights.tsx":{"content":"import { useState } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Droplets,\n  Flame,\n  Heart,\n  Moon,\n  Activity,\n  TrendingUp,\n  Plus,\n  Minus,\n  Award,\n  Clock,\n  Zap,\n  Target,\n  Brain\n} from \"lucide-react\";\nimport BMIChart from \"@/components/BMIChart\";\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from \"recharts\";\n\nexport default function Insights() {\n  const [waterIntake, setWaterIntake] = useState(4);\n  const waterGoal = 8;\n  const glassSize = 250;\n\n  const addWater = () => setWaterIntake(Math.min(waterIntake + 1, 12));\n  const removeWater = () => setWaterIntake(Math.max(waterIntake - 1, 0));\n\n  const macronutrients = [\n    { name: \"Protein\", value: 30, color: \"hsl(var(--chart-1))\" },\n    { name: \"Carbs\", value: 45, color: \"hsl(var(--chart-2))\" },\n    { name: \"Fats\", value: 25, color: \"hsl(var(--chart-3))\" }\n  ];\n\n  const dailyCalories = 2200;\n  const tdee = 2400;\n  const bmr = 1650;\n\n  return (\n    <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"mb-8 text-center\"\n      >\n        <h1 className=\"font-heading text-4xl sm:text-5xl font-bold mb-4 bg-gradient-to-r from-primary to-chart-2 bg-clip-text text-transparent\">\n          Health Metrics Dashboard\n        </h1>\n        <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n          Track your daily health metrics and get personalized insights\n        </p>\n      </motion.div>\n\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4 mb-8\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.1 }}\n        >\n          <Card className=\"hover-elevate\" data-testid=\"card-daily-calories\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground flex items-center gap-2\">\n                <Flame className=\"h-4 w-4\" />\n                Daily Calories\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-3xl font-bold text-primary\" data-testid=\"value-daily-calories\">{dailyCalories}</p>\n              <p className=\"text-xs text-muted-foreground mt-1\">Recommended intake</p>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2 }}\n        >\n          <Card className=\"hover-elevate\" data-testid=\"card-tdee\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground flex items-center gap-2\">\n                <Zap className=\"h-4 w-4\" />\n                TDEE\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-3xl font-bold text-chart-2\" data-testid=\"value-tdee\">{tdee}</p>\n              <p className=\"text-xs text-muted-foreground mt-1\">Total daily energy</p>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.3 }}\n        >\n          <Card className=\"hover-elevate\" data-testid=\"card-bmr\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground flex items-center gap-2\">\n                <Heart className=\"h-4 w-4\" />\n                BMR\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-3xl font-bold text-chart-3\" data-testid=\"value-bmr\">{bmr}</p>\n              <p className=\"text-xs text-muted-foreground mt-1\">Basal metabolic rate</p>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.4 }}\n        >\n          <Card className=\"hover-elevate\" data-testid=\"card-active-minutes\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground flex items-center gap-2\">\n                <Activity className=\"h-4 w-4\" />\n                Active Minutes\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-3xl font-bold text-chart-4\" data-testid=\"value-active-minutes\">45</p>\n              <p className=\"text-xs text-muted-foreground mt-1\">Today's activity</p>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n\n      <div className=\"grid gap-6 lg:grid-cols-2 mb-8\">\n        <motion.div\n          initial={{ opacity: 0, x: -20 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ delay: 0.5 }}\n        >\n          <Card className=\"h-full\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Droplets className=\"h-6 w-6 text-blue-500\" />\n                Hydration Tracker\n              </CardTitle>\n              <CardDescription>Track your daily water intake</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"text-center\">\n                <div className=\"flex items-center justify-center gap-2 mb-2\">\n                  <Droplets className=\"h-8 w-8 text-blue-500\" />\n                  <p className=\"text-5xl font-bold text-blue-500\" data-testid=\"value-water-intake\">{waterIntake}</p>\n                  <span className=\"text-2xl text-muted-foreground\">/ {waterGoal}</span>\n                </div>\n                <p className=\"text-sm text-muted-foreground\" data-testid=\"text-water-ml\">\n                  {waterIntake * glassSize}ml of {waterGoal * glassSize}ml daily goal\n                </p>\n              </div>\n\n              <Progress value={(waterIntake / waterGoal) * 100} className=\"h-3\" />\n\n              <div className=\"flex justify-center gap-4\">\n                <Button onClick={removeWater} variant=\"outline\" size=\"lg\" className=\"gap-2\" data-testid=\"button-remove-water\">\n                  <Minus className=\"h-4 w-4\" />\n                  Remove Glass\n                </Button>\n                <Button onClick={addWater} size=\"lg\" className=\"gap-2 bg-blue-500 hover:bg-blue-600\" data-testid=\"button-add-water\">\n                  <Plus className=\"h-4 w-4\" />\n                  Add Glass\n                </Button>\n              </div>\n\n              <div className=\"grid grid-cols-4 gap-2\">\n                {Array.from({ length: waterGoal }).map((_, i) => (\n                  <div\n                    key={i}\n                    className={`h-16 rounded-lg flex items-center justify-center transition-all ${\n                      i < waterIntake\n                        ? 'bg-blue-500 text-white'\n                        : 'bg-muted border-2 border-dashed border-muted-foreground/30'\n                    }`}\n                  >\n                    <Droplets className={`h-8 w-8 ${i < waterIntake ? 'opacity-100' : 'opacity-30'}`} />\n                  </div>\n                ))}\n              </div>\n\n              {waterIntake >= waterGoal && (\n                <motion.div\n                  initial={{ scale: 0 }}\n                  animate={{ scale: 1 }}\n                  className=\"p-4 rounded-lg bg-green-500/10 border border-green-500/20 text-center\"\n                  data-testid=\"hydration-achievement\"\n                >\n                  <Award className=\"h-8 w-8 text-green-500 mx-auto mb-2\" />\n                  <p className=\"font-semibold text-green-600\">Great job! Hydration goal achieved!</p>\n                </motion.div>\n              )}\n\n              <div className=\"space-y-2 pt-4 border-t\">\n                <h4 className=\"font-semibold text-sm\">Hydration Benefits:</h4>\n                <ul className=\"text-xs text-muted-foreground space-y-1\">\n                  <li>• Boosts energy and cognitive function</li>\n                  <li>• Aids in weight management and metabolism</li>\n                  <li>• Improves skin health and complexion</li>\n                  <li>• Supports digestion and nutrient absorption</li>\n                </ul>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, x: 20 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ delay: 0.6 }}\n        >\n          <Card className=\"h-full\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Target className=\"h-6 w-6 text-primary\" />\n                Macronutrient Balance\n              </CardTitle>\n              <CardDescription>Optimal daily nutrition breakdown</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={macronutrients}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ name, value }) => `${name}: ${value}%`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                    >\n                      {macronutrients.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                    <Legend />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n\n              <div className=\"grid gap-3 mt-4\">\n                <div className=\"p-3 rounded-lg bg-muted/50\">\n                  <div className=\"flex items-center justify-between mb-1\">\n                    <span className=\"text-sm font-medium\">Protein</span>\n                    <Badge style={{ backgroundColor: macronutrients[0].color }}>165g</Badge>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">Essential for muscle repair and growth</p>\n                </div>\n                <div className=\"p-3 rounded-lg bg-muted/50\">\n                  <div className=\"flex items-center justify-between mb-1\">\n                    <span className=\"text-sm font-medium\">Carbohydrates</span>\n                    <Badge style={{ backgroundColor: macronutrients[1].color }}>248g</Badge>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">Primary energy source for body and brain</p>\n                </div>\n                <div className=\"p-3 rounded-lg bg-muted/50\">\n                  <div className=\"flex items-center justify-between mb-1\">\n                    <span className=\"text-sm font-medium\">Fats</span>\n                    <Badge style={{ backgroundColor: macronutrients[2].color }}>61g</Badge>\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">Supports hormone production and vitamin absorption</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n\n      <div className=\"grid gap-6 lg:grid-cols-3 mb-8\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.7 }}\n        >\n          <Card className=\"hover-elevate h-full\" data-testid=\"card-sleep-quality\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-lg\">\n                <Moon className=\"h-5 w-5 text-purple-500\" />\n                Sleep Quality\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-muted-foreground\">Average Sleep</span>\n                <span className=\"text-2xl font-bold text-purple-500\" data-testid=\"value-sleep-hours\">7.5h</span>\n              </div>\n              <Progress value={75} className=\"h-2\" />\n              <p className=\"text-xs text-muted-foreground\">\n                Aim for 7-9 hours of quality sleep for optimal recovery\n              </p>\n              <div className=\"pt-2 border-t space-y-1\">\n                <div className=\"flex items-center gap-2 text-xs\">\n                  <Clock className=\"h-3 w-3 text-muted-foreground\" />\n                  <span>Bedtime: 10:30 PM</span>\n                </div>\n                <div className=\"flex items-center gap-2 text-xs\">\n                  <Clock className=\"h-3 w-3 text-muted-foreground\" />\n                  <span>Wake time: 6:00 AM</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.8 }}\n        >\n          <Card className=\"hover-elevate h-full\" data-testid=\"card-activity-level\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-lg\">\n                <Activity className=\"h-5 w-5 text-green-500\" />\n                Activity Level\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <Badge className=\"bg-green-500/10 text-green-600 border-green-500/20\" data-testid=\"badge-activity-level\">Moderately Active</Badge>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Steps Today</span>\n                  <span className=\"font-semibold\">8,234</span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Calories Burned</span>\n                  <span className=\"font-semibold\">420 kcal</span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Workout Streak</span>\n                  <span className=\"font-semibold\">5 days</span>\n                </div>\n              </div>\n              <Progress value={65} className=\"h-2\" />\n              <p className=\"text-xs text-muted-foreground\">\n                65% of your weekly activity goal achieved\n              </p>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.9 }}\n        >\n          <Card className=\"hover-elevate h-full\" data-testid=\"card-wellness-score\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-lg\">\n                <Brain className=\"h-5 w-5 text-orange-500\" />\n                Wellness Score\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-muted-foreground\">Overall Health</span>\n                <div className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"h-4 w-4 text-green-500\" />\n                  <span className=\"text-2xl font-bold text-orange-500\" data-testid=\"value-wellness-score\">82/100</span>\n                </div>\n              </div>\n              <Progress value={82} className=\"h-2\" />\n              <div className=\"grid grid-cols-2 gap-2 pt-2 border-t\">\n                <div className=\"text-center p-2 rounded-lg bg-muted/50\">\n                  <p className=\"text-xs text-muted-foreground\">Nutrition</p>\n                  <p className=\"text-lg font-bold text-green-500\">85</p>\n                </div>\n                <div className=\"text-center p-2 rounded-lg bg-muted/50\">\n                  <p className=\"text-xs text-muted-foreground\">Fitness</p>\n                  <p className=\"text-lg font-bold text-blue-500\">78</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 1.0 }}\n      >\n        <BMIChart userBMI={24.2} />\n      </motion.div>\n\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 1.1 }}\n        className=\"mt-8 p-6 rounded-lg bg-gradient-to-br from-primary/5 to-chart-2/5 border border-primary/10 text-center\"\n      >\n        <p className=\"text-sm text-muted-foreground\">\n          <strong className=\"text-foreground\">Note:</strong> These metrics and insights are based on general health guidelines.\n          For personalized medical advice, please consult with qualified healthcare professionals.\n        </p>\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":17415},"client/src/components/examples/BMICalculator.tsx":{"content":"import BMICalculator from \"../BMICalculator\";\n\nexport default function BMICalculatorExample() {\n  return (\n    <div className=\"min-h-screen bg-background p-8\">\n      <BMICalculator onCalculate={(data) => console.log(\"Calculated:\", data)} />\n    </div>\n  );\n}\n","size_bytes":259},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/examples/BMIResults.tsx":{"content":"import BMIResults from \"../BMIResults\";\n\nexport default function BMIResultsExample() {\n  return (\n    <div className=\"min-h-screen bg-background p-8\">\n      <BMIResults\n        bmi={24.2}\n        category=\"normal\"\n        idealRange=\"18.5 - 24.9\"\n        aiTips={[\n          \"Maintain your current healthy weight through balanced nutrition\",\n          \"Aim for 150 minutes of moderate aerobic activity per week\",\n          \"Stay hydrated with 8-10 glasses of water daily\",\n          \"Ensure 7-9 hours of quality sleep each night\",\n        ]}\n      />\n    </div>\n  );\n}\n","size_bytes":569},"server/storage.ts":{"content":"// Using the javascript_database blueprint\nimport { users, bmiRecords, type User, type InsertUser, type BmiRecord, type InsertBmiRecord } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: number): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // BMI Record operations\n  createBmiRecord(record: InsertBmiRecord): Promise<BmiRecord>;\n  getUserBmiHistory(userId: number): Promise<BmiRecord[]>;\n  getLatestBmiRecord(userId: number): Promise<BmiRecord | undefined>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser as any)\n      .returning();\n    return user;\n  }\n\n  async createBmiRecord(record: InsertBmiRecord): Promise<BmiRecord> {\n    const [bmiRecord] = await db\n      .insert(bmiRecords)\n      .values(record as any)\n      .returning();\n    return bmiRecord;\n  }\n\n  async getUserBmiHistory(userId: number): Promise<BmiRecord[]> {\n    return db\n      .select()\n      .from(bmiRecords)\n      .where(eq(bmiRecords.userId, userId))\n      .orderBy(desc(bmiRecords.createdAt));\n  }\n\n  async getLatestBmiRecord(userId: number): Promise<BmiRecord | undefined> {\n    const [record] = await db\n      .select()\n      .from(bmiRecords)\n      .where(eq(bmiRecords.userId, userId))\n      .orderBy(desc(bmiRecords.createdAt))\n      .limit(1);\n    return record || undefined;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":1999},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/HumanModel3D.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\nimport * as THREE from 'three';\n\ntype HumanModel3DProps = {\n  bmiCategory?: 'underweight' | 'normal' | 'overweight' | 'obese';\n  height?: number;\n  weight?: number;\n};\n\nexport default function HumanModel3D({ bmiCategory = 'normal', height = 170, weight = 70 }: HumanModel3DProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const sceneRef = useRef<THREE.Scene | null>(null);\n  const rendererRef = useRef<THREE.WebGLRenderer | null>(null);\n  const cameraRef = useRef<THREE.PerspectiveCamera | null>(null);\n  const modelRef = useRef<THREE.Group | null>(null);\n  const isRotatingRef = useRef(true);\n  const [showDragHint, setShowDragHint] = useState(true);\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    const scene = new THREE.Scene();\n    scene.background = null;\n    sceneRef.current = scene;\n\n    const camera = new THREE.PerspectiveCamera(\n      50,\n      containerRef.current.clientWidth / containerRef.current.clientHeight,\n      0.1,\n      1000\n    );\n    camera.position.set(0, 1, 5);\n    cameraRef.current = camera;\n\n    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n    renderer.setSize(containerRef.current.clientWidth, containerRef.current.clientHeight);\n    renderer.setClearColor(0x000000, 0);\n    containerRef.current.appendChild(renderer.domElement);\n    rendererRef.current = renderer;\n\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\n    scene.add(ambientLight);\n\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(5, 10, 7.5);\n    scene.add(directionalLight);\n\n    const pointLight = new THREE.PointLight(0x4facfe, 0.5);\n    pointLight.position.set(-5, 5, 5);\n    scene.add(pointLight);\n\n    const model = createHumanModel(bmiCategory, height, weight);\n    scene.add(model);\n    modelRef.current = model;\n\n    const animate = () => {\n      requestAnimationFrame(animate);\n      \n      if (modelRef.current && isRotatingRef.current) {\n        modelRef.current.rotation.y += 0.005;\n      }\n      \n      renderer.render(scene, camera);\n    };\n    animate();\n\n    const handleResize = () => {\n      if (!containerRef.current) return;\n      const width = containerRef.current.clientWidth;\n      const height = containerRef.current.clientHeight;\n      \n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n    };\n    \n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (containerRef.current && renderer.domElement) {\n        containerRef.current.removeChild(renderer.domElement);\n      }\n      renderer.dispose();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (modelRef.current && sceneRef.current) {\n      sceneRef.current.remove(modelRef.current);\n      \n      modelRef.current.traverse((object) => {\n        if (object instanceof THREE.Mesh) {\n          if (object.geometry) {\n            object.geometry.dispose();\n          }\n          if (object.material) {\n            if (Array.isArray(object.material)) {\n              object.material.forEach(material => material.dispose());\n            } else {\n              object.material.dispose();\n            }\n          }\n        }\n      });\n      \n      const newModel = createHumanModel(bmiCategory, height, weight);\n      sceneRef.current.add(newModel);\n      modelRef.current = newModel;\n    }\n  }, [bmiCategory, height, weight]);\n\n  const handleMouseDown = () => {\n    isRotatingRef.current = false;\n    setShowDragHint(false);\n  };\n\n  const handleMouseUp = () => {\n    isRotatingRef.current = true;\n  };\n\n  return (\n    <div className=\"relative w-full h-full\">\n      <div \n        ref={containerRef} \n        className=\"w-full h-full cursor-grab active:cursor-grabbing\"\n        onMouseDown={handleMouseDown}\n        onMouseUp={handleMouseUp}\n        onMouseLeave={handleMouseUp}\n        onTouchStart={handleMouseDown}\n        onTouchEnd={handleMouseUp}\n        data-testid=\"canvas-3d-model\"\n      />\n      {showDragHint && (\n        <div className=\"absolute top-4 left-1/2 -translate-x-1/2 text-xs text-muted-foreground bg-background/90 backdrop-blur-sm px-4 py-2 rounded-full animate-pulse\">\n          Drag to rotate\n        </div>\n      )}\n      <div className=\"absolute bottom-4 right-4 flex flex-col gap-2\">\n        <div className=\"text-xs text-muted-foreground bg-background/80 backdrop-blur-sm px-3 py-1 rounded-md capitalize\">\n          {bmiCategory}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction createHumanModel(category: string, height: number, weight: number): THREE.Group {\n  const group = new THREE.Group();\n  \n  const categoryMap = {\n    underweight: { bodyScale: 0.75, muscleScale: 0.7, torsoWidth: 0.85, waistScale: 0.7, hipScale: 0.75, accentColor: 0x4facfe },\n    normal: { bodyScale: 1.0, muscleScale: 1.0, torsoWidth: 1.0, waistScale: 0.85, hipScale: 1.0, accentColor: 0x00f2c3 },\n    overweight: { bodyScale: 1.25, muscleScale: 1.15, torsoWidth: 1.3, waistScale: 1.25, hipScale: 1.3, accentColor: 0xffd93d },\n    obese: { bodyScale: 1.5, muscleScale: 1.35, torsoWidth: 1.6, waistScale: 1.6, hipScale: 1.6, accentColor: 0xff6b9d }\n  };\n  \n  const config = categoryMap[category as keyof typeof categoryMap] || categoryMap.normal;\n  \n  // More realistic skin tone with subtle variation\n  const skinTone = 0xf5d5c5;\n  \n  const skinMaterial = new THREE.MeshStandardMaterial({\n    color: skinTone,\n    metalness: 0.05,\n    roughness: 0.9,\n    emissive: config.accentColor,\n    emissiveIntensity: 0.1\n  });\n\n  const highlightMaterial = new THREE.MeshStandardMaterial({\n    color: new THREE.Color(skinTone).multiplyScalar(0.95),\n    metalness: 0.1,\n    roughness: 0.85,\n    emissive: config.accentColor,\n    emissiveIntensity: 0.15\n  });\n\n  const hairMaterial = new THREE.MeshStandardMaterial({\n    color: 0x3d2817,\n    metalness: 0.3,\n    roughness: 0.6\n  });\n\n  // More realistic head with proper proportions\n  const headGeometry = new THREE.SphereGeometry(0.38, 32, 32);\n  headGeometry.scale(1, 1.2, 1); // More natural head shape\n  const head = new THREE.Mesh(headGeometry, skinMaterial);\n  head.position.y = 2.35;\n  group.add(head);\n\n  // Hair - realistic hairstyle\n  const hairGeometry = new THREE.SphereGeometry(0.39, 32, 32);\n  hairGeometry.scale(1, 0.9, 1);\n  const hair = new THREE.Mesh(hairGeometry, hairMaterial);\n  hair.position.copy(head.position);\n  hair.position.y += 0.1;\n  group.add(hair);\n\n  // Ears\n  const createEar = (posX: number) => {\n    const earGeometry = new THREE.SphereGeometry(0.08, 16, 16);\n    earGeometry.scale(0.5, 1, 0.3);\n    const ear = new THREE.Mesh(earGeometry, skinMaterial);\n    ear.position.set(posX, 2.35, 0);\n    return ear;\n  };\n  group.add(createEar(-0.35), createEar(0.35));\n\n  // Facial features\n  const faceGroup = new THREE.Group();\n  faceGroup.position.copy(head.position);\n  \n  // Eye sockets and eyes with more detail\n  const eyeWhiteMaterial = new THREE.MeshStandardMaterial({ \n    color: 0xffffff,\n    metalness: 0.1,\n    roughness: 0.5\n  });\n  const irisMaterial = new THREE.MeshStandardMaterial({ \n    color: 0x4a6fa5,\n    metalness: 0.8,\n    roughness: 0.2\n  });\n  const pupilMaterial = new THREE.MeshStandardMaterial({ \n    color: 0x000000,\n    metalness: 1.0,\n    roughness: 0.1\n  });\n\n  const createEye = (posX: number) => {\n    const eyeGroup = new THREE.Group();\n    \n    // Eye white\n    const eyeWhite = new THREE.Mesh(\n      new THREE.SphereGeometry(0.06, 16, 16),\n      eyeWhiteMaterial\n    );\n    eyeWhite.scale.z = 0.5;\n    \n    // Iris\n    const iris = new THREE.Mesh(\n      new THREE.SphereGeometry(0.035, 16, 16),\n      irisMaterial\n    );\n    iris.position.z = 0.04;\n    \n    // Pupil\n    const pupil = new THREE.Mesh(\n      new THREE.SphereGeometry(0.018, 12, 12),\n      pupilMaterial\n    );\n    pupil.position.z = 0.05;\n    \n    eyeGroup.add(eyeWhite, iris, pupil);\n    eyeGroup.position.set(posX, 0.1, 0.32);\n    return eyeGroup;\n  };\n  \n  faceGroup.add(createEye(-0.13), createEye(0.13));\n  \n  // Nose with realistic structure\n  const noseBridge = new THREE.Mesh(\n    new THREE.BoxGeometry(0.04, 0.15, 0.05),\n    skinMaterial\n  );\n  noseBridge.position.set(0, 0.02, 0.34);\n  faceGroup.add(noseBridge);\n  \n  const noseTip = new THREE.Mesh(\n    new THREE.SphereGeometry(0.055, 16, 16),\n    skinMaterial\n  );\n  noseTip.position.set(0, -0.06, 0.36);\n  noseTip.scale.set(0.8, 0.7, 1);\n  faceGroup.add(noseTip);\n  \n  // Nostrils\n  const createNostril = (posX: number) => {\n    const nostril = new THREE.Mesh(\n      new THREE.SphereGeometry(0.02, 8, 8),\n      new THREE.MeshStandardMaterial({ color: 0x2c1810, metalness: 0, roughness: 1 })\n    );\n    nostril.position.set(posX, -0.08, 0.35);\n    nostril.scale.set(0.7, 0.5, 0.5);\n    return nostril;\n  };\n  faceGroup.add(createNostril(-0.03), createNostril(0.03));\n  \n  // Mouth\n  const mouthGeometry = new THREE.BoxGeometry(0.15, 0.02, 0.02);\n  const mouth = new THREE.Mesh(\n    mouthGeometry,\n    new THREE.MeshStandardMaterial({ color: 0xc97d7d, metalness: 0.2, roughness: 0.8 })\n  );\n  mouth.position.set(0, -0.18, 0.33);\n  faceGroup.add(mouth);\n  \n  // Lips\n  const upperLip = new THREE.Mesh(\n    new THREE.BoxGeometry(0.14, 0.025, 0.03),\n    new THREE.MeshStandardMaterial({ color: 0xd99999, metalness: 0.1, roughness: 0.7 })\n  );\n  upperLip.position.set(0, -0.17, 0.33);\n  faceGroup.add(upperLip);\n  \n  const lowerLip = new THREE.Mesh(\n    new THREE.BoxGeometry(0.14, 0.03, 0.03),\n    new THREE.MeshStandardMaterial({ color: 0xd99999, metalness: 0.1, roughness: 0.7 })\n  );\n  lowerLip.position.set(0, -0.195, 0.33);\n  faceGroup.add(lowerLip);\n  \n  // Eyebrows\n  const createEyebrow = (posX: number) => {\n    const eyebrow = new THREE.Mesh(\n      new THREE.BoxGeometry(0.12, 0.02, 0.01),\n      hairMaterial\n    );\n    eyebrow.position.set(posX, 0.2, 0.33);\n    eyebrow.rotation.z = posX > 0 ? -0.1 : 0.1;\n    return eyebrow;\n  };\n  faceGroup.add(createEyebrow(-0.13), createEyebrow(0.13));\n  \n  group.add(faceGroup);\n\n  // Neck\n  const neck = new THREE.Mesh(\n    new THREE.CylinderGeometry(0.15, 0.18, 0.25, 16),\n    skinMaterial\n  );\n  neck.position.y = 2.0;\n  group.add(neck);\n\n  // Upper chest (clavicle area)\n  const upperChest = new THREE.Mesh(\n    new THREE.BoxGeometry(0.5 * config.torsoWidth, 0.2, 0.25),\n    highlightMaterial\n  );\n  upperChest.position.y = 1.75;\n  group.add(upperChest);\n\n  // Chest/Torso - more anatomical shape\n  const chestGeometry = new THREE.CylinderGeometry(\n    0.35 * config.torsoWidth,\n    0.4 * config.waistScale,\n    0.8,\n    32\n  );\n  const chest = new THREE.Mesh(chestGeometry, skinMaterial);\n  chest.position.y = 1.3;\n  chest.scale.z = 0.6;\n  group.add(chest);\n\n  // Pectoral/breast area detail\n  const pectoralLeft = new THREE.Mesh(\n    new THREE.SphereGeometry(0.15 * config.muscleScale, 16, 16),\n    highlightMaterial\n  );\n  pectoralLeft.position.set(-0.15 * config.torsoWidth, 1.5, 0.12);\n  pectoralLeft.scale.z = 0.6;\n  const pectoralRight = new THREE.Mesh(\n    new THREE.SphereGeometry(0.15 * config.muscleScale, 16, 16),\n    highlightMaterial\n  );\n  pectoralRight.position.set(0.15 * config.torsoWidth, 1.5, 0.12);\n  pectoralRight.scale.z = 0.6;\n  group.add(pectoralLeft, pectoralRight);\n\n  // Abdomen with realistic curvature\n  const abdomenGeometry = new THREE.SphereGeometry(0.38 * config.waistScale, 32, 32);\n  const abdomen = new THREE.Mesh(abdomenGeometry, skinMaterial);\n  abdomen.scale.set(1, 0.7, 0.8);\n  abdomen.position.y = 0.75;\n  group.add(abdomen);\n\n  // Waist definition\n  const waist = new THREE.Mesh(\n    new THREE.CylinderGeometry(\n      0.32 * config.waistScale,\n      0.38 * config.waistScale,\n      0.35,\n      32\n    ),\n    skinMaterial\n  );\n  waist.position.y = 0.5;\n  waist.scale.z = 0.7;\n  group.add(waist);\n\n  // Hips with more realistic shape\n  const hips = new THREE.Mesh(\n    new THREE.SphereGeometry(0.42 * config.hipScale, 32, 16),\n    skinMaterial\n  );\n  hips.scale.set(1.1, 0.55, 0.9);\n  hips.position.y = 0.15;\n  group.add(hips);\n  \n  // Gluteus (buttocks) for realistic back view\n  const glutes = new THREE.Mesh(\n    new THREE.SphereGeometry(0.22 * config.hipScale, 24, 16),\n    skinMaterial\n  );\n  glutes.scale.set(0.8, 0.9, 1.2);\n  glutes.position.set(0, 0.1, -0.15);\n  group.add(glutes);\n\n  // Shoulders with more definition\n  const createShoulder = (posX: number) => {\n    const shoulder = new THREE.Mesh(\n      new THREE.SphereGeometry(0.18 * config.muscleScale, 16, 16),\n      highlightMaterial\n    );\n    shoulder.position.set(posX, 1.65, 0);\n    return shoulder;\n  };\n  \n  const leftShoulder = createShoulder(-0.45 * config.torsoWidth);\n  const rightShoulder = createShoulder(0.45 * config.torsoWidth);\n  group.add(leftShoulder, rightShoulder);\n\n  // Arms with proper joints\n  const createArm = (posX: number) => {\n    const armGroup = new THREE.Group();\n    \n    // Upper arm\n    const upperArm = new THREE.Mesh(\n      new THREE.CylinderGeometry(0.11 * config.muscleScale, 0.09 * config.muscleScale, 0.55, 16),\n      skinMaterial\n    );\n    upperArm.position.set(posX, 1.35, 0);\n    \n    // Elbow joint\n    const elbow = new THREE.Mesh(\n      new THREE.SphereGeometry(0.10 * config.muscleScale, 12, 12),\n      highlightMaterial\n    );\n    elbow.position.set(posX, 1.05, 0);\n    \n    // Forearm\n    const forearm = new THREE.Mesh(\n      new THREE.CylinderGeometry(0.09 * config.muscleScale, 0.07 * config.muscleScale, 0.5, 16),\n      skinMaterial\n    );\n    forearm.position.set(posX, 0.75, 0);\n    \n    // Hand with palm\n    const palm = new THREE.Mesh(\n      new THREE.BoxGeometry(0.11 * config.muscleScale, 0.14, 0.06),\n      skinMaterial\n    );\n    palm.position.set(posX, 0.43, 0);\n    \n    // Fingers\n    const fingerMaterial = skinMaterial;\n    const createFinger = (offsetX: number, offsetY: number, length: number) => {\n      const finger = new THREE.Mesh(\n        new THREE.CylinderGeometry(0.012 * config.muscleScale, 0.01 * config.muscleScale, length, 8),\n        fingerMaterial\n      );\n      finger.position.set(posX + offsetX, 0.35 + offsetY, 0);\n      return finger;\n    };\n    \n    const fingers = [\n      createFinger(-0.04, 0, 0.08),  // Index\n      createFinger(-0.02, 0.01, 0.09), // Middle\n      createFinger(0.01, 0, 0.08),   // Ring\n      createFinger(0.03, -0.01, 0.07), // Pinky\n      createFinger(-0.06, 0.04, 0.06)  // Thumb (positioned differently)\n    ];\n    \n    armGroup.add(upperArm, elbow, forearm, palm, ...fingers);\n    return armGroup;\n  };\n\n  const leftArmGroup = createArm(-0.52 * config.torsoWidth);\n  const rightArmGroup = createArm(0.52 * config.torsoWidth);\n  group.add(leftArmGroup, rightArmGroup);\n\n  // Legs with proper anatomy\n  const createLeg = (posX: number) => {\n    const legGroup = new THREE.Group();\n    \n    // Thigh with muscle definition\n    const thigh = new THREE.Mesh(\n      new THREE.CylinderGeometry(0.14 * config.bodyScale, 0.12 * config.bodyScale, 0.7, 16),\n      skinMaterial\n    );\n    thigh.position.set(posX, -0.25, 0);\n    \n    // Knee\n    const knee = new THREE.Mesh(\n      new THREE.SphereGeometry(0.12 * config.bodyScale, 12, 12),\n      highlightMaterial\n    );\n    knee.position.set(posX, -0.62, 0);\n    \n    // Calf with proper taper\n    const calf = new THREE.Mesh(\n      new THREE.CylinderGeometry(0.11 * config.bodyScale, 0.08 * config.bodyScale, 0.65, 16),\n      skinMaterial\n    );\n    calf.position.set(posX, -1.0, 0);\n    \n    // Ankle\n    const ankle = new THREE.Mesh(\n      new THREE.CylinderGeometry(0.07 * config.bodyScale, 0.07 * config.bodyScale, 0.1, 12),\n      skinMaterial\n    );\n    ankle.position.set(posX, -1.35, 0);\n    \n    // More realistic foot\n    const footBase = new THREE.Mesh(\n      new THREE.BoxGeometry(0.13 * config.bodyScale, 0.07, 0.22),\n      skinMaterial\n    );\n    footBase.position.set(posX, -1.46, 0.09);\n    \n    // Toes\n    const toesGroup = new THREE.Group();\n    for (let i = 0; i < 5; i++) {\n      const toe = new THREE.Mesh(\n        new THREE.SphereGeometry(0.015 * config.bodyScale, 8, 8),\n        skinMaterial\n      );\n      toe.scale.set(1, 0.6, 1.2);\n      toe.position.set(\n        posX - 0.04 * config.bodyScale + (i * 0.02 * config.bodyScale),\n        -1.46,\n        0.2\n      );\n      toesGroup.add(toe);\n    }\n    \n    legGroup.add(thigh, knee, calf, ankle, footBase, toesGroup);\n    return legGroup;\n  };\n\n  const leftLeg = createLeg(-0.2 * config.bodyScale);\n  const rightLeg = createLeg(0.2 * config.bodyScale);\n  group.add(leftLeg, rightLeg);\n\n  // Subtle glow effect based on health status\n  const glowGeometry = new THREE.SphereGeometry(0.5, 32, 32);\n  const glowMaterial = new THREE.MeshBasicMaterial({\n    color: config.accentColor,\n    transparent: true,\n    opacity: 0.1,\n    side: THREE.BackSide\n  });\n  const bodyGlow = new THREE.Mesh(glowGeometry, glowMaterial);\n  bodyGlow.position.y = 1.0;\n  bodyGlow.scale.set(1.5 * config.bodyScale, 2.5, 1);\n  group.add(bodyGlow);\n\n  // Subtle particle effect at key points\n  const addGlowPoint = (x: number, y: number, z: number) => {\n    const pointGlow = new THREE.Mesh(\n      new THREE.SphereGeometry(0.05, 8, 8),\n      new THREE.MeshBasicMaterial({\n        color: config.accentColor,\n        transparent: true,\n        opacity: 0.6\n      })\n    );\n    pointGlow.position.set(x, y, z);\n    group.add(pointGlow);\n  };\n\n  // Add glow points at joints\n  addGlowPoint(0, 2.3, 0); // Head\n  addGlowPoint(0, 1.3, 0); // Chest\n  addGlowPoint(0, 0.5, 0); // Abdomen\n\n  group.scale.set(0.75, 0.75, 0.75);\n  group.position.y = -0.5;\n\n  return group;\n}\n","size_bytes":17569},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"README.md":{"content":"# bmi","size_bytes":5},"design_guidelines.md":{"content":"# AI-Enhanced BMI Calculator - Design Guidelines\n\n## Design Approach\n**Reference-Based Approach**: Drawing inspiration from Apple Health's clean minimalism and Calm App's soothing aesthetic, combined with health-tech precision. The design balances medical credibility with approachable wellness aesthetics.\n\n**Core Principle**: Transform clinical BMI calculation into an empowering health insight experience through intelligent visual design and AI-driven personalization.\n\n---\n\n## Color Palette\n\n### Light Mode\n- **Primary Brand**: 200 85% 45% (Vibrant Blue-Teal)\n- **Secondary**: 160 75% 50% (Fresh Green)\n- **Background**: 0 0% 98% (Soft White)\n- **Surface**: 0 0% 100% (Pure White)\n- **Text Primary**: 220 20% 15% (Deep Navy)\n- **Text Secondary**: 220 15% 45% (Muted Blue-Gray)\n\n### Dark Mode\n- **Primary Brand**: 200 85% 55% (Brighter Blue-Teal)\n- **Secondary**: 160 75% 55% (Vibrant Green)\n- **Background**: 220 25% 8% (Rich Dark Blue)\n- **Surface**: 220 20% 12% (Elevated Dark)\n- **Text Primary**: 0 0% 95% (Bright White)\n- **Text Secondary**: 220 10% 70% (Soft Gray)\n\n### Gradient System\n- **Hero Gradient**: Blue (200 85% 45%) → Green (160 75% 50%) at 135deg\n- **Card Hover**: Subtle gradient overlays using primary at 10% opacity\n- **Category Indicators**:\n  - Underweight: 30 90% 60% (Warm Orange)\n  - Normal: 120 70% 50% (Healthy Green)\n  - Overweight: 40 95% 55% (Alert Yellow)\n  - Obese: 0 85% 55% (Warning Red)\n\n---\n\n## Typography\n\n**Font Stack**: 'Poppins' for headings, 'Inter' for body text (both from Google Fonts)\n\n### Hierarchy\n- **Hero Headline**: text-6xl font-bold (Poppins) - \"Know Your Body. Master Your Health.\"\n- **Section Headers**: text-4xl font-semibold (Poppins)\n- **Subsection Headers**: text-2xl font-medium (Poppins)\n- **Body Text**: text-base font-normal (Inter)\n- **Micro Copy**: text-sm font-medium (Inter)\n- **Button Text**: text-lg font-semibold (Poppins)\n\n---\n\n## Layout System\n\n**Spacing Primitives**: Use Tailwind units of 4, 6, 8, 12, 16, 20, 24 for consistent rhythm\n- Component padding: p-6 to p-8\n- Section spacing: py-16 to py-24\n- Card gaps: gap-6 to gap-8\n- Element margins: mb-4, mb-6, mb-8\n\n**Container Strategy**:\n- Max width: max-w-7xl for content sections\n- Hero: Full width with inner max-w-6xl\n- Forms: max-w-2xl centered\n- Cards: Grid with gap-6 (1 column mobile, 2-3 desktop)\n\n---\n\n## Component Library\n\n### Landing Page Hero\n- Full viewport height (min-h-screen) with gradient background\n- Animated floating health icons (Framer Motion subtle float)\n- Large centered headline with gradient text effect\n- Primary CTA: Large rounded button with glow effect\n- Dark mode toggle: Floating top-right with moon/sun icon\n\n### BMI Calculator Interface\n- Clean card-based layout (rounded-2xl with soft shadow)\n- Input fields: Segmented controls for gender, dropdowns for age/activity, dual sliders for height/weight\n- Unit toggles: cm/ft, kg/lbs with smooth transitions\n- Real-time calculation display: Large BMI number with animated ring chart\n- Results card: Color-coded category badge, ideal range bar, AI tips section\n\n### Charts & Visualizations\n- BMI Trend Chart: Recharts line chart with gradient fill\n- Category Scale: Horizontal bar showing user position\n- Color coding matches category indicators\n- Smooth animations on data updates\n\n### Navigation\n- Sticky header with logo, nav links, dark mode toggle\n- Mobile: Hamburger menu with slide-in drawer\n- Active state: Underline with primary color\n\n### Cards\n- Elevated cards: bg-surface with shadow-lg\n- Hover: Lift effect (transform scale-105) + shadow increase\n- Border: Subtle gradient border on hover\n\n### Buttons\n- Primary: Gradient background, white text, rounded-full, px-8 py-4\n- Secondary: Outline style with primary border\n- On images: Backdrop-blur-md with semi-transparent background\n- Icons: Heroicons for consistency\n\n### Forms\n- Floating labels for inputs\n- Focus states: Primary color ring\n- Validation: Inline error messages in red\n- Submit: Disabled state with opacity and cursor changes\n\n### Insights Page\n- Dashboard layout: 2-column grid (chart + AI summary)\n- AI Summary Card: Gradient border, icon header, formatted text\n- Weekly Tips: Numbered list with check icons\n- Data visualization: Full-width chart with legend\n\n### About Page\n- Centered single-column layout (max-w-4xl)\n- Developer story: Large profile image, bio text, achievement highlights\n- Technology stack: Icon grid showing React, FastAPI, AI technologies\n- Call-to-action: Contact or GitHub link\n\n### Footer\n- Full-width dark background (surface color in dark mode)\n- Centered text: \"Designed by Fina | Empowered by AI | Built for the Future.\"\n- Social links: Icons with hover effects\n- Copyright notice\n\n---\n\n## Animation Guidelines\n\n**Framer Motion Patterns** (use sparingly for polish, not distraction):\n- Page transitions: Fade + slide (duration: 0.3s)\n- Hero elements: Subtle float/pulse on mount\n- Cards: Hover lift (scale-105, duration: 0.2s)\n- Results: Number count-up animation\n- Chart: Fade-in with stagger for data points\n- No aggressive animations - maintain Apple Health calmness\n\n---\n\n## Images\n\n### Hero Section\n**Large Hero Image**: Yes - Health/wellness themed abstract imagery\n- Image description: Modern, clean health technology visualization with soft gradients (blue-green tones), showing abstract body metrics or wellness icons in minimalist style\n- Placement: Background with 50% opacity gradient overlay\n- Treatment: Subtle blur or pattern overlay to maintain text readability\n\n### Additional Images\n- Calculator Page: Icon illustrations for gender, activity level (inline SVG preferred)\n- Insights: Small accent images for health tips (vegetables, exercise, sleep icons)\n- About Page: Developer photo or avatar (circular, centered above bio)\n\n---\n\n## Accessibility & Dark Mode\n- Consistent dark mode across ALL components including inputs\n- Focus indicators: 3px primary color ring\n- Sufficient contrast ratios (WCAG AA minimum)\n- Touch targets: Minimum 44x44px for mobile\n- Alt text for all images and icons\n- Semantic HTML with proper heading hierarchy\n\n---\n\n## Responsive Breakpoints\n- Mobile: < 640px (single column, stacked layout)\n- Tablet: 640px - 1024px (2-column grids)\n- Desktop: > 1024px (full multi-column layouts)\n- All text scales down one size on mobile\n\nThis design creates a premium health-tech experience that feels both medically credible and personally empowering.","size_bytes":6408},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/EnhancedBMICalculator.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Calculator, User, Activity, Ruler, Weight } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport HumanModel3D from \"./HumanModel3D\";\n\ntype BMIFormData = {\n  gender: string;\n  age: string;\n  height: number;\n  weight: number;\n  activityLevel: string;\n  unit: \"metric\" | \"imperial\";\n};\n\ntype EnhancedBMICalculatorProps = {\n  onCalculate?: (data: BMIFormData) => void;\n};\n\nexport default function EnhancedBMICalculator({ onCalculate }: EnhancedBMICalculatorProps) {\n  const [formData, setFormData] = useState<BMIFormData>({\n    gender: \"male\",\n    age: \"30\",\n    height: 170,\n    weight: 70,\n    activityLevel: \"moderate\",\n    unit: \"metric\",\n  });\n\n  const [previewBMI, setPreviewBMI] = useState<\"underweight\" | \"normal\" | \"overweight\" | \"obese\">(\"normal\");\n\n  const calculatePreviewBMI = (height: number, weight: number) => {\n    const heightInMeters = height / 100;\n    const bmi = weight / (heightInMeters * heightInMeters);\n    \n    if (bmi < 18.5) return \"underweight\";\n    if (bmi < 25) return \"normal\";\n    if (bmi < 30) return \"overweight\";\n    return \"obese\";\n  };\n\n  const handleHeightChange = (value: number) => {\n    setFormData({ ...formData, height: value });\n    setPreviewBMI(calculatePreviewBMI(value, formData.weight));\n  };\n\n  const handleWeightChange = (value: number) => {\n    setFormData({ ...formData, weight: value });\n    setPreviewBMI(calculatePreviewBMI(formData.height, value));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onCalculate?.(formData);\n  };\n\n  return (\n    <div className=\"grid lg:grid-cols-2 gap-8 items-start\">\n      <motion.div\n        initial={{ opacity: 0, x: -20 }}\n        animate={{ opacity: 1, x: 0 }}\n        transition={{ duration: 0.5 }}\n      >\n        <Card className=\"relative overflow-hidden backdrop-blur-sm bg-card/50 border-2\" data-testid=\"card-enhanced-calculator\">\n          <div className=\"absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-chart-2/5 pointer-events-none\" />\n          \n          <CardContent className=\"relative p-8\">\n            <div className=\"flex items-center gap-3 mb-6\">\n              <div className=\"p-3 rounded-xl bg-primary/10 backdrop-blur-sm\">\n                <Calculator className=\"h-7 w-7 text-primary\" />\n              </div>\n              <div>\n                <h2 className=\"font-heading text-2xl font-bold\" data-testid=\"text-calculator-title\">Advanced BMI Calculator</h2>\n                <p className=\"text-sm text-muted-foreground\">Real-time body analysis</p>\n              </div>\n            </div>\n\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"gender\" className=\"flex items-center gap-2 text-sm font-medium\">\n                    <User className=\"h-4 w-4 text-primary\" />\n                    Gender\n                  </Label>\n                  <Select\n                    value={formData.gender}\n                    onValueChange={(value) =>\n                      setFormData({ ...formData, gender: value })\n                    }\n                  >\n                    <SelectTrigger id=\"gender\" data-testid=\"select-gender\" className=\"bg-background/50\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"male\">Male</SelectItem>\n                      <SelectItem value=\"female\">Female</SelectItem>\n                      <SelectItem value=\"other\">Other</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"age\" className=\"text-sm font-medium\">Age (years)</Label>\n                  <Input\n                    id=\"age\"\n                    type=\"number\"\n                    value={formData.age}\n                    onChange={(e) =>\n                      setFormData({ ...formData, age: e.target.value })\n                    }\n                    min=\"1\"\n                    max=\"120\"\n                    className=\"bg-background/50\"\n                    data-testid=\"input-age\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-4 p-4 rounded-xl bg-gradient-to-br from-primary/5 to-transparent border\">\n                <div className=\"flex items-center justify-between\">\n                  <Label className=\"flex items-center gap-2 text-sm font-medium\">\n                    <Ruler className=\"h-4 w-4 text-primary\" />\n                    Height\n                  </Label>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      type=\"button\"\n                      variant={formData.unit === \"metric\" ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => setFormData({ ...formData, unit: \"metric\" })}\n                      data-testid=\"button-unit-metric\"\n                    >\n                      Metric\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      variant={formData.unit === \"imperial\" ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => setFormData({ ...formData, unit: \"imperial\" })}\n                      data-testid=\"button-unit-imperial\"\n                    >\n                      Imperial\n                    </Button>\n                  </div>\n                </div>\n                \n                <div className=\"text-center\">\n                  <span className=\"text-3xl font-bold text-primary\" data-testid=\"text-height-value\">{formData.height}</span>\n                  <span className=\"text-lg text-muted-foreground ml-2\">cm</span>\n                </div>\n                \n                <Slider\n                  value={[formData.height]}\n                  onValueChange={([value]) => handleHeightChange(value)}\n                  min={100}\n                  max={250}\n                  step={1}\n                  className=\"py-4\"\n                  data-testid=\"slider-height\"\n                />\n              </div>\n\n              <div className=\"space-y-4 p-4 rounded-xl bg-gradient-to-br from-chart-2/5 to-transparent border\">\n                <Label className=\"flex items-center gap-2 text-sm font-medium\">\n                  <Weight className=\"h-4 w-4 text-chart-2\" />\n                  Weight\n                </Label>\n                \n                <div className=\"text-center\">\n                  <span className=\"text-3xl font-bold text-chart-2\" data-testid=\"text-weight-value\">{formData.weight}</span>\n                  <span className=\"text-lg text-muted-foreground ml-2\">kg</span>\n                </div>\n                \n                <Slider\n                  value={[formData.weight]}\n                  onValueChange={([value]) => handleWeightChange(value)}\n                  min={30}\n                  max={200}\n                  step={1}\n                  className=\"py-4\"\n                  data-testid=\"slider-weight\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"activity\" className=\"flex items-center gap-2 text-sm font-medium\">\n                  <Activity className=\"h-4 w-4 text-primary\" />\n                  Activity Level\n                </Label>\n                <Select\n                  value={formData.activityLevel}\n                  onValueChange={(value) =>\n                    setFormData({ ...formData, activityLevel: value })\n                  }\n                >\n                  <SelectTrigger id=\"activity\" data-testid=\"select-activity\" className=\"bg-background/50\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"sedentary\">Sedentary (little or no exercise)</SelectItem>\n                    <SelectItem value=\"light\">Light (exercise 1-3 days/week)</SelectItem>\n                    <SelectItem value=\"moderate\">Moderate (exercise 3-5 days/week)</SelectItem>\n                    <SelectItem value=\"active\">Active (exercise 6-7 days/week)</SelectItem>\n                    <SelectItem value=\"very-active\">Very Active (intense exercise daily)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <Button \n                type=\"submit\" \n                className=\"w-full font-heading text-lg h-12 bg-gradient-to-r from-primary to-chart-2 hover:opacity-90\" \n                size=\"lg\" \n                data-testid=\"button-submit\"\n              >\n                Calculate & Get Diet Plan\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </motion.div>\n\n      <motion.div\n        initial={{ opacity: 0, x: 20 }}\n        animate={{ opacity: 1, x: 0 }}\n        transition={{ duration: 0.5, delay: 0.2 }}\n        className=\"lg:sticky lg:top-8\"\n      >\n        <Card className=\"overflow-hidden backdrop-blur-sm bg-card/50 border-2\">\n          <div className=\"aspect-square relative\">\n            <HumanModel3D \n              bmiCategory={previewBMI}\n              height={formData.height}\n              weight={formData.weight}\n            />\n          </div>\n          <CardContent className=\"p-4 bg-gradient-to-t from-background to-transparent\">\n            <div className=\"text-center\">\n              <p className=\"text-sm text-muted-foreground\">Live Preview</p>\n              <p className=\"text-lg font-semibold capitalize\" data-testid=\"text-preview-category\">\n                {previewBMI}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":10214},"client/src/pages/Calculator.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport EnhancedBMICalculator from \"@/components/EnhancedBMICalculator\";\nimport BMIResults from \"@/components/BMIResults\";\nimport BMIChart from \"@/components/BMIChart\";\nimport { Button } from \"@/components/ui/button\";\nimport { motion } from \"framer-motion\";\nimport { Utensils, ArrowRight } from \"lucide-react\";\n\ntype BMIData = {\n  bmi: number;\n  category: \"underweight\" | \"normal\" | \"overweight\" | \"obese\";\n  idealRange: string;\n  aiTips: string[];\n};\n\nexport default function Calculator() {\n  const [results, setResults] = useState<BMIData | null>(null);\n  const [, setLocation] = useLocation();\n\n  const calculateBMI = (data: any) => {\n    const heightInMeters = data.height / 100;\n    const bmi = data.weight / (heightInMeters * heightInMeters);\n    \n    let category: \"underweight\" | \"normal\" | \"overweight\" | \"obese\";\n    let aiTips: string[];\n    \n    if (bmi < 18.5) {\n      category = \"underweight\";\n      aiTips = [\n        \"Consider adding nutrient-dense, calorie-rich foods to your diet\",\n        \"Include strength training to build healthy muscle mass\",\n        \"Eat more frequently throughout the day with balanced snacks\",\n        \"Consult with a nutritionist for a personalized meal plan\",\n      ];\n    } else if (bmi < 25) {\n      category = \"normal\";\n      aiTips = [\n        \"Maintain your current healthy weight through balanced nutrition\",\n        \"Aim for 150 minutes of moderate aerobic activity per week\",\n        \"Stay hydrated with 8-10 glasses of water daily\",\n        \"Ensure 7-9 hours of quality sleep each night\",\n      ];\n    } else if (bmi < 30) {\n      category = \"overweight\";\n      aiTips = [\n        \"Focus on creating a sustainable calorie deficit through diet\",\n        \"Incorporate both cardio and strength training into your routine\",\n        \"Track your food intake to identify areas for improvement\",\n        \"Set realistic weight loss goals of 0.5-1kg per week\",\n      ];\n    } else {\n      category = \"obese\";\n      aiTips = [\n        \"Consult with healthcare professionals for personalized guidance\",\n        \"Start with low-impact exercises like walking or swimming\",\n        \"Focus on whole foods and limit processed items\",\n        \"Consider working with a registered dietitian\",\n      ];\n    }\n\n    setResults({\n      bmi,\n      category,\n      idealRange: \"18.5 - 24.9\",\n      aiTips,\n    });\n  };\n\n  return (\n    <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"mb-12 text-center\"\n      >\n        <h1 className=\"font-heading text-4xl sm:text-5xl font-bold mb-4 bg-gradient-to-r from-primary to-chart-2 bg-clip-text text-transparent\">\n          BMI Calculator with 3D Visualization\n        </h1>\n        <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n          Experience real-time body analysis with interactive 3D model and personalized health insights\n        </p>\n      </motion.div>\n\n      <div className=\"space-y-8\">\n        <EnhancedBMICalculator onCalculate={calculateBMI} />\n        \n        {results && (\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"space-y-8\"\n          >\n            <BMIResults\n              bmi={results.bmi}\n              category={results.category}\n              idealRange={results.idealRange}\n              aiTips={results.aiTips}\n            />\n            <BMIChart userBMI={results.bmi} />\n            \n            <div className=\"flex justify-center\">\n              <Button\n                onClick={() => setLocation(\"/diet-plan\")}\n                size=\"lg\"\n                className=\"gap-2 bg-gradient-to-r from-primary to-chart-2\"\n                data-testid=\"button-view-diet-plan\"\n              >\n                <Utensils className=\"h-5 w-5\" />\n                View Detailed Diet Plans\n                <ArrowRight className=\"h-5 w-5\" />\n              </Button>\n            </div>\n          </motion.div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":4143},"client/src/components/examples/BMIChart.tsx":{"content":"import BMIChart from \"../BMIChart\";\n\nexport default function BMIChartExample() {\n  return (\n    <div className=\"min-h-screen bg-background p-8\">\n      <BMIChart userBMI={24.2} />\n    </div>\n  );\n}\n","size_bytes":197},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table - stores user profile information\nexport const users = pgTable(\"users\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  age: integer(\"age\").notNull(),\n  gender: text(\"gender\").notNull(), // 'male', 'female', 'other'\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// BMI Records table - stores historical BMI calculations\nexport const bmiRecords = pgTable(\"bmi_records\", {\n  id: integer(\"id\").primaryKey().generatedAlwaysAsIdentity(),\n  userId: integer(\"user_id\").notNull().references(() => users.id),\n  height: decimal(\"height\", { precision: 5, scale: 2 }).notNull(), // in cm\n  weight: decimal(\"weight\", { precision: 5, scale: 2 }).notNull(), // in kg\n  bmi: decimal(\"bmi\", { precision: 4, scale: 2 }).notNull(),\n  category: text(\"category\").notNull(), // 'underweight', 'normal', 'overweight', 'obese'\n  activityLevel: text(\"activity_level\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  bmiRecords: many(bmiRecords),\n}));\n\nexport const bmiRecordsRelations = relations(bmiRecords, ({ one }) => ({\n  user: one(users, {\n    fields: [bmiRecords.userId],\n    references: [users.id],\n  }),\n}));\n\n// Zod schemas for validation\nexport const insertUserSchema = createInsertSchema(users, {\n  age: z.number().min(1).max(120),\n  gender: z.enum([\"male\", \"female\", \"other\"]),\n}).omit({\n  id: true as any,\n  createdAt: true as any,\n});\n\nexport const insertBmiRecordSchema = createInsertSchema(bmiRecords, {\n  height: z.string().or(z.number()),\n  weight: z.string().or(z.number()),\n  bmi: z.string().or(z.number()),\n  category: z.enum([\"underweight\", \"normal\", \"overweight\", \"obese\"]),\n}).omit({\n  id: true as any,\n  createdAt: true as any,\n});\n\n// TypeScript types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertBmiRecord = z.infer<typeof insertBmiRecordSchema>;\nexport type BmiRecord = typeof bmiRecords.$inferSelect;\n","size_bytes":2333},"client/src/components/BMIResults.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { TrendingUp, AlertCircle, CheckCircle, Activity } from \"lucide-react\";\n\ntype BMICategory = \"underweight\" | \"normal\" | \"overweight\" | \"obese\";\n\ntype BMIResultsProps = {\n  bmi: number;\n  category: BMICategory;\n  idealRange: string;\n  aiTips?: string[];\n};\n\nconst categoryConfig: Record<BMICategory, { color: string; icon: any; label: string }> = {\n  underweight: {\n    color: \"text-chart-3 bg-chart-3/10 border-chart-3/20\",\n    icon: AlertCircle,\n    label: \"Underweight\",\n  },\n  normal: {\n    color: \"text-chart-2 bg-chart-2/10 border-chart-2/20\",\n    icon: CheckCircle,\n    label: \"Normal Weight\",\n  },\n  overweight: {\n    color: \"text-chart-4 bg-chart-4/10 border-chart-4/20\",\n    icon: TrendingUp,\n    label: \"Overweight\",\n  },\n  obese: {\n    color: \"text-chart-5 bg-chart-5/10 border-chart-5/20\",\n    icon: AlertCircle,\n    label: \"Obese\",\n  },\n};\n\nexport default function BMIResults({ bmi, category, idealRange, aiTips = [] }: BMIResultsProps) {\n  const config = categoryConfig[category];\n  const Icon = config.icon;\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.95 }}\n      animate={{ opacity: 1, scale: 1 }}\n      transition={{ duration: 0.3 }}\n      className=\"w-full max-w-2xl mx-auto\"\n    >\n      <Card data-testid=\"card-bmi-results\">\n        <CardHeader>\n          <CardTitle className=\"font-heading text-2xl flex items-center gap-2\">\n            <Activity className=\"h-6 w-6 text-primary\" />\n            Your BMI Results\n          </CardTitle>\n          <CardDescription>Based on your provided measurements</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"text-center py-6\">\n            <motion.div\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              transition={{ duration: 0.5, delay: 0.2, type: \"spring\" }}\n              className=\"inline-flex flex-col items-center gap-4\"\n            >\n              <div className=\"text-6xl font-heading font-bold bg-gradient-to-r from-primary to-chart-2 bg-clip-text text-transparent\" data-testid=\"text-bmi-value\">\n                {bmi.toFixed(1)}\n              </div>\n              <Badge className={`${config.color} flex items-center gap-1 px-4 py-2 text-sm font-semibold border`} data-testid=\"badge-bmi-category\">\n                <Icon className=\"h-4 w-4\" />\n                {config.label}\n              </Badge>\n            </motion.div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <div className=\"p-4 rounded-lg bg-muted/50\">\n              <div className=\"text-sm font-medium text-muted-foreground mb-1\">\n                Ideal BMI Range\n              </div>\n              <div className=\"text-lg font-heading font-semibold\" data-testid=\"text-ideal-range\">\n                {idealRange}\n              </div>\n            </div>\n\n            <div className=\"relative pt-2\">\n              <div className=\"flex justify-between text-xs text-muted-foreground mb-2\">\n                <span>18.5</span>\n                <span>25</span>\n                <span>30</span>\n              </div>\n              <div className=\"h-3 w-full bg-gradient-to-r from-chart-3 via-chart-2 via-chart-4 to-chart-5 rounded-full relative\">\n                <motion.div\n                  initial={{ left: 0 }}\n                  animate={{ left: `${Math.min(Math.max(((bmi - 15) / 25) * 100, 0), 100)}%` }}\n                  transition={{ duration: 0.8, delay: 0.3 }}\n                  className=\"absolute top-1/2 -translate-y-1/2 -translate-x-1/2 w-4 h-4 bg-foreground rounded-full border-2 border-background shadow-lg\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {aiTips && aiTips.length > 0 && (\n            <div className=\"p-4 rounded-lg border bg-card\">\n              <h4 className=\"font-heading font-semibold mb-3 flex items-center gap-2\">\n                <span className=\"text-primary\">AI</span> Health Recommendations\n              </h4>\n              <ul className=\"space-y-2\">\n                {aiTips.map((tip, index) => (\n                  <motion.li\n                    key={index}\n                    initial={{ opacity: 0, x: -10 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    transition={{ duration: 0.3, delay: 0.4 + index * 0.1 }}\n                    className=\"flex items-start gap-2 text-sm\"\n                    data-testid={`text-tip-${index}`}\n                  >\n                    <CheckCircle className=\"h-4 w-4 text-chart-2 mt-0.5 flex-shrink-0\" />\n                    <span>{tip}</span>\n                  </motion.li>\n                ))}\n              </ul>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </motion.div>\n  );\n}\n","size_bytes":4902},"client/src/components/examples/Hero.tsx":{"content":"import Hero from \"../Hero\";\nimport { Router } from \"wouter\";\n\nexport default function HeroExample() {\n  return (\n    <Router>\n      <div className=\"bg-background\">\n        <Hero />\n      </div>\n    </Router>\n  );\n}\n","size_bytes":215},"client/src/components/BMICalculator.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Calculator, User, Activity } from \"lucide-react\";\n\ntype BMIFormData = {\n  gender: string;\n  age: string;\n  height: number;\n  weight: number;\n  activityLevel: string;\n  unit: \"metric\" | \"imperial\";\n};\n\ntype BMICalculatorProps = {\n  onCalculate?: (data: BMIFormData) => void;\n};\n\nexport default function BMICalculator({ onCalculate }: BMICalculatorProps) {\n  const [formData, setFormData] = useState<BMIFormData>({\n    gender: \"male\",\n    age: \"30\",\n    height: 170,\n    weight: 70,\n    activityLevel: \"moderate\",\n    unit: \"metric\",\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log(\"BMI Calculation submitted:\", formData);\n    onCalculate?.(formData);\n  };\n\n  return (\n    <Card className=\"w-full max-w-2xl mx-auto\" data-testid=\"card-bmi-calculator\">\n      <CardHeader>\n        <div className=\"flex items-center gap-2\">\n          <Calculator className=\"h-6 w-6 text-primary\" />\n          <CardTitle className=\"font-heading text-2xl\">BMI Calculator</CardTitle>\n        </div>\n        <CardDescription>\n          Enter your details to calculate your Body Mass Index and get personalized insights\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"gender\" className=\"flex items-center gap-2\">\n                <User className=\"h-4 w-4 text-muted-foreground\" />\n                Gender\n              </Label>\n              <Select\n                value={formData.gender}\n                onValueChange={(value) =>\n                  setFormData({ ...formData, gender: value })\n                }\n              >\n                <SelectTrigger id=\"gender\" data-testid=\"select-gender\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"male\">Male</SelectItem>\n                  <SelectItem value=\"female\">Female</SelectItem>\n                  <SelectItem value=\"other\">Other</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"age\">Age (years)</Label>\n              <Input\n                id=\"age\"\n                type=\"number\"\n                value={formData.age}\n                onChange={(e) =>\n                  setFormData({ ...formData, age: e.target.value })\n                }\n                min=\"1\"\n                max=\"120\"\n                data-testid=\"input-age\"\n              />\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <Label>Height: {formData.height} cm</Label>\n              <div className=\"flex gap-2\">\n                <Button\n                  type=\"button\"\n                  variant={formData.unit === \"metric\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setFormData({ ...formData, unit: \"metric\" })}\n                  data-testid=\"button-unit-metric\"\n                >\n                  Metric\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant={formData.unit === \"imperial\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setFormData({ ...formData, unit: \"imperial\" })}\n                  data-testid=\"button-unit-imperial\"\n                >\n                  Imperial\n                </Button>\n              </div>\n            </div>\n            <Slider\n              value={[formData.height]}\n              onValueChange={([value]) =>\n                setFormData({ ...formData, height: value })\n              }\n              min={100}\n              max={250}\n              step={1}\n              data-testid=\"slider-height\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label>Weight: {formData.weight} kg</Label>\n            <Slider\n              value={[formData.weight]}\n              onValueChange={([value]) =>\n                setFormData({ ...formData, weight: value })\n              }\n              min={30}\n              max={200}\n              step={1}\n              data-testid=\"slider-weight\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"activity\" className=\"flex items-center gap-2\">\n              <Activity className=\"h-4 w-4 text-muted-foreground\" />\n              Activity Level\n            </Label>\n            <Select\n              value={formData.activityLevel}\n              onValueChange={(value) =>\n                setFormData({ ...formData, activityLevel: value })\n              }\n            >\n              <SelectTrigger id=\"activity\" data-testid=\"select-activity\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"sedentary\">Sedentary (little or no exercise)</SelectItem>\n                <SelectItem value=\"light\">Light (exercise 1-3 days/week)</SelectItem>\n                <SelectItem value=\"moderate\">Moderate (exercise 3-5 days/week)</SelectItem>\n                <SelectItem value=\"active\">Active (exercise 6-7 days/week)</SelectItem>\n                <SelectItem value=\"very-active\">Very Active (intense exercise daily)</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <Button type=\"submit\" className=\"w-full font-heading\" size=\"lg\" data-testid=\"button-submit\">\n            Calculate BMI\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6157},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 220 20% 15%;\n\n  --border: 220 10% 88%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 220 20% 15%;\n\n  --card-border: 220 8% 94%;\n\n  --sidebar: 0 0% 97%;\n\n  --sidebar-foreground: 220 20% 15%;\n\n  --sidebar-border: 220 8% 92%;\n\n  --sidebar-primary: 200 85% 45%;\n\n  --sidebar-primary-foreground: 200 10% 98%;\n\n  --sidebar-accent: 220 12% 88%;\n\n  --sidebar-accent-foreground: 220 20% 20%;\n\n  --sidebar-ring: 200 85% 45%;\n\n  --popover: 0 0% 99%;\n\n  --popover-foreground: 220 20% 15%;\n\n  --popover-border: 220 8% 93%;\n\n  --primary: 200 85% 45%;\n\n  --primary-foreground: 200 10% 98%;\n\n  --secondary: 220 12% 92%;\n\n  --secondary-foreground: 220 20% 20%;\n\n  --muted: 220 10% 94%;\n\n  --muted-foreground: 220 15% 45%;\n\n  --accent: 220 8% 92%;\n\n  --accent-foreground: 220 20% 20%;\n\n  --destructive: 0 85% 55%;\n\n  --destructive-foreground: 0 5% 98%;\n\n  --input: 220 15% 65%;\n  --ring: 200 85% 45%;\n  --chart-1: 200 85% 45%;\n  --chart-2: 160 75% 50%;\n  --chart-3: 30 90% 60%;\n  --chart-4: 40 95% 55%;\n  --chart-5: 0 85% 55%;\n\n  --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 20% 15% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 20% 15% / 0.08);\n  --shadow-sm: 0px 2px 4px 0px hsl(220 20% 15% / 0.06), 0px 1px 2px -1px hsl(220 20% 15% / 0.04);\n  --shadow: 0px 4px 6px -1px hsl(220 20% 15% / 0.08), 0px 2px 4px -2px hsl(220 20% 15% / 0.05);\n  --shadow-md: 0px 6px 10px -2px hsl(220 20% 15% / 0.10), 0px 2px 4px -2px hsl(220 20% 15% / 0.06);\n  --shadow-lg: 0px 10px 15px -3px hsl(220 20% 15% / 0.10), 0px 4px 6px -4px hsl(220 20% 15% / 0.08);\n  --shadow-xl: 0px 20px 25px -5px hsl(220 20% 15% / 0.12), 0px 8px 10px -6px hsl(220 20% 15% / 0.08);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 20% 15% / 0.20);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 25% 8%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 220 18% 18%;\n\n  --card: 220 20% 12%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 220 18% 15%;\n\n  --sidebar: 220 22% 10%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 220 20% 14%;\n\n  --sidebar-primary: 200 85% 55%;\n\n  --sidebar-primary-foreground: 200 10% 98%;\n\n  --sidebar-accent: 220 18% 16%;\n\n  --sidebar-accent-foreground: 220 10% 90%;\n\n  --sidebar-ring: 200 85% 55%;\n\n  --popover: 220 20% 13%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 220 18% 16%;\n\n  --primary: 200 85% 55%;\n\n  --primary-foreground: 200 10% 98%;\n\n  --secondary: 220 18% 18%;\n\n  --secondary-foreground: 220 10% 90%;\n\n  --muted: 220 18% 15%;\n\n  --muted-foreground: 220 10% 70%;\n\n  --accent: 220 16% 17%;\n\n  --accent-foreground: 220 10% 90%;\n\n  --destructive: 0 85% 55%;\n\n  --destructive-foreground: 0 5% 98%;\n\n  /* Used as the border around inputs. Dark mode: Should be a border that is light enough to have high contrast when rendered on a --card background. More contrast than standard --border */\n  --input: 220 15% 35%;\n  --ring: 200 85% 55%;\n  --chart-1: 200 85% 55%;\n  --chart-2: 160 75% 55%;\n  --chart-3: 30 90% 65%;\n  --chart-4: 40 95% 60%;\n  --chart-5: 0 85% 60%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.20);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.30);\n  --shadow-sm: 0px 2px 4px 0px hsl(0 0% 0% / 0.25), 0px 1px 2px -1px hsl(0 0% 0% / 0.20);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.30), 0px 2px 4px -2px hsl(0 0% 0% / 0.25);\n  --shadow-md: 0px 6px 10px -2px hsl(0 0% 0% / 0.35), 0px 2px 4px -2px hsl(0 0% 0% / 0.25);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.40), 0px 4px 6px -4px hsl(0 0% 0% / 0.30);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.45), 0px 8px 10px -6px hsl(0 0% 0% / 0.35);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.50);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11558},"client/src/components/AboutSection.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Code, Brain, Heart, Award } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\n\nexport default function AboutSection() {\n  const technologies = [\n    { name: \"React\", icon: Code },\n    { name: \"Express\", icon: Code },\n    { name: \"OpenAI\", icon: Brain },\n    { name: \"TypeScript\", icon: Code },\n  ];\n\n  const achievements = [\n    { value: \"25+\", label: \"Years Experience\", icon: Award },\n    { value: \"AI\", label: \"Powered Insights\", icon: Brain },\n    { value: \"100%\", label: \"Dedicated to Health\", icon: Heart },\n  ];\n\n  return (\n    <div className=\"w-full max-w-5xl mx-auto space-y-8\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n        className=\"text-center mb-12\"\n      >\n        <h1 className=\"font-heading text-4xl sm:text-5xl font-bold mb-4 bg-gradient-to-r from-primary to-chart-2 bg-clip-text text-transparent\">\n          About BMI Insight\n        </h1>\n        <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n          Created by Fina - 25+ years inspired by health, AI, and precision\n        </p>\n      </motion.div>\n\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5, delay: 0.2 }}\n      >\n        <Card>\n          <CardContent className=\"p-8\">\n            <div className=\"space-y-6\">\n              <div>\n                <h2 className=\"font-heading text-2xl font-semibold mb-4\">Our Mission</h2>\n                <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-mission\">\n                  At BMI Insight, we believe that understanding your body is the first step\n                  toward mastering your health. With over 25 years of experience in health\n                  technology solutions, we've created a platform that goes beyond simple\n                  calculations to provide intelligent, personalized health insights.\n                </p>\n              </div>\n\n              <div>\n                <h2 className=\"font-heading text-2xl font-semibold mb-4\">The Vision</h2>\n                <p className=\"text-muted-foreground leading-relaxed\" data-testid=\"text-vision\">\n                  We envision a world where everyone has access to professional-grade health\n                  analytics. By combining artificial intelligence with proven medical science,\n                  we're making personalized health guidance accessible to all. Our AI-powered\n                  system analyzes your unique profile to deliver recommendations tailored\n                  specifically for you.\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4 pt-4\">\n                {achievements.map((item, index) => (\n                  <motion.div\n                    key={index}\n                    initial={{ opacity: 0, scale: 0.9 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    transition={{ duration: 0.3, delay: 0.4 + index * 0.1 }}\n                    className=\"p-6 rounded-lg bg-gradient-to-br from-primary/5 to-chart-2/5 text-center hover-elevate\"\n                    data-testid={`stat-${item.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    <item.icon className=\"h-8 w-8 text-primary mx-auto mb-2\" />\n                    <div className=\"text-3xl font-heading font-bold bg-gradient-to-r from-primary to-chart-2 bg-clip-text text-transparent\">\n                      {item.value}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground mt-1\">{item.label}</div>\n                  </motion.div>\n                ))}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </motion.div>\n\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5, delay: 0.4 }}\n      >\n        <Card>\n          <CardContent className=\"p-8\">\n            <h2 className=\"font-heading text-2xl font-semibold mb-6\">Built With</h2>\n            <div className=\"flex flex-wrap gap-3\">\n              {technologies.map((tech, index) => (\n                <Badge\n                  key={index}\n                  variant=\"secondary\"\n                  className=\"px-4 py-2 text-sm font-medium hover-elevate\"\n                  data-testid={`badge-tech-${tech.name.toLowerCase()}`}\n                >\n                  <tech.icon className=\"h-4 w-4 mr-2\" />\n                  {tech.name}\n                </Badge>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":4799},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/BMIChart.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, ReferenceLine, Cell } from \"recharts\";\nimport { TrendingUp } from \"lucide-react\";\n\ntype BMIChartProps = {\n  userBMI: number;\n};\n\nexport default function BMIChart({ userBMI }: BMIChartProps) {\n  const data = [\n    { category: \"Underweight\", range: \"< 18.5\", value: 17, color: \"hsl(var(--chart-3))\" },\n    { category: \"Normal\", range: \"18.5-24.9\", value: 21.7, color: \"hsl(var(--chart-2))\" },\n    { category: \"Overweight\", range: \"25-29.9\", value: 27.5, color: \"hsl(var(--chart-4))\" },\n    { category: \"Obese\", range: \"≥ 30\", value: 35, color: \"hsl(var(--chart-5))\" },\n  ];\n\n  return (\n    <Card className=\"w-full\" data-testid=\"card-bmi-chart\">\n      <CardHeader>\n        <div className=\"flex items-center gap-2\">\n          <TrendingUp className=\"h-5 w-5 text-primary\" />\n          <CardTitle className=\"font-heading\">BMI Category Scale</CardTitle>\n        </div>\n        <CardDescription>See where your BMI falls on the scale</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <BarChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"hsl(var(--border))\" />\n            <XAxis\n              dataKey=\"category\"\n              tick={{ fill: \"hsl(var(--muted-foreground))\", fontSize: 12 }}\n            />\n            <YAxis\n              tick={{ fill: \"hsl(var(--muted-foreground))\", fontSize: 12 }}\n              label={{ value: \"BMI\", angle: -90, position: \"insideLeft\", fill: \"hsl(var(--muted-foreground))\" }}\n            />\n            <Tooltip\n              contentStyle={{\n                backgroundColor: \"hsl(var(--card))\",\n                border: \"1px solid hsl(var(--border))\",\n                borderRadius: \"6px\",\n                color: \"hsl(var(--card-foreground))\",\n              }}\n              formatter={(value: number) => [`BMI: ${value}`, \"\"]}\n            />\n            <ReferenceLine\n              y={userBMI}\n              stroke=\"hsl(var(--foreground))\"\n              strokeWidth={2}\n              strokeDasharray=\"5 5\"\n              label={{\n                value: `Your BMI: ${userBMI.toFixed(1)}`,\n                position: \"top\",\n                fill: \"hsl(var(--foreground))\",\n                fontSize: 12,\n                fontWeight: \"bold\",\n              }}\n            />\n            <Bar dataKey=\"value\" radius={[8, 8, 0, 0]}>\n              {data.map((entry, index) => (\n                <Cell key={`cell-${index}`} fill={entry.color} />\n              ))}\n            </Bar>\n          </BarChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2825},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/pages/Progress.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { motion } from \"framer-motion\";\nimport {\n  TrendingDown,\n  TrendingUp,\n  Calendar,\n  Weight,\n  Activity,\n  Target,\n  Award,\n  LineChart as LineChartIcon,\n  Plus,\n  Trash2\n} from \"lucide-react\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Area, AreaChart } from \"recharts\";\n\ntype ProgressEntry = {\n  id: string;\n  date: string;\n  weight: number;\n  bmi: number;\n  notes?: string;\n};\n\nexport default function Progress() {\n  const [entries, setEntries] = useState<ProgressEntry[]>([\n    { id: \"1\", date: \"2025-01-05\", weight: 75, bmi: 24.2, notes: \"Started fitness journey\" },\n    { id: \"2\", date: \"2025-01-12\", weight: 74, bmi: 23.9, notes: \"First week completed\" },\n    { id: \"3\", date: \"2025-01-19\", weight: 73.5, bmi: 23.7, notes: \"Feeling great!\" }\n  ]);\n\n  const [newWeight, setNewWeight] = useState(\"\");\n  const [height] = useState(175); // Default height in cm\n\n  const addEntry = () => {\n    if (!newWeight || parseFloat(newWeight) <= 0) return;\n\n    const weight = parseFloat(newWeight);\n    const heightInMeters = height / 100;\n    const bmi = weight / (heightInMeters * heightInMeters);\n\n    const newEntry: ProgressEntry = {\n      id: Date.now().toString(),\n      date: new Date().toISOString().split('T')[0],\n      weight,\n      bmi: parseFloat(bmi.toFixed(1)),\n      notes: \"\"\n    };\n\n    setEntries([...entries, newEntry]);\n    setNewWeight(\"\");\n  };\n\n  const deleteEntry = (id: string) => {\n    setEntries(entries.filter(entry => entry.id !== id));\n  };\n\n  const calculateProgress = () => {\n    if (entries.length < 2) return null;\n    const first = entries[0];\n    const latest = entries[entries.length - 1];\n    const weightChange = latest.weight - first.weight;\n    const bmiChange = latest.bmi - first.bmi;\n    return { weightChange, bmiChange };\n  };\n\n  const progress = calculateProgress();\n\n  const chartData = entries.map(entry => ({\n    date: new Date(entry.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),\n    weight: entry.weight,\n    bmi: entry.bmi\n  }));\n\n  const currentBMI = entries.length > 0 ? entries[entries.length - 1].bmi : 0;\n  const getBMICategory = (bmi: number) => {\n    if (bmi < 18.5) return { category: \"Underweight\", color: \"text-blue-500\", bgColor: \"bg-blue-500/10\" };\n    if (bmi < 25) return { category: \"Normal\", color: \"text-green-500\", bgColor: \"bg-green-500/10\" };\n    if (bmi < 30) return { category: \"Overweight\", color: \"text-orange-500\", bgColor: \"bg-orange-500/10\" };\n    return { category: \"Obese\", color: \"text-red-500\", bgColor: \"bg-red-500/10\" };\n  };\n\n  const bmiStatus = getBMICategory(currentBMI);\n\n  return (\n    <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"mb-8 text-center\"\n      >\n        <h1 className=\"font-heading text-4xl sm:text-5xl font-bold mb-4 bg-gradient-to-r from-primary to-chart-2 bg-clip-text text-transparent\">\n          Progress Tracker\n        </h1>\n        <p className=\"text-lg text-muted-foreground max-w-3xl mx-auto\">\n          Monitor your health journey with comprehensive tracking and visual analytics\n        </p>\n      </motion.div>\n\n      <div className=\"grid gap-6 md:grid-cols-3 mb-8\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.1 }}\n        >\n          <Card className=\"hover-elevate\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">Current BMI</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className={`text-3xl font-bold ${bmiStatus.color}`}>{currentBMI.toFixed(1)}</p>\n                  <Badge className={`${bmiStatus.bgColor} mt-2`}>{bmiStatus.category}</Badge>\n                </div>\n                <Activity className={`h-12 w-12 ${bmiStatus.color} opacity-20`} />\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.2 }}\n        >\n          <Card className=\"hover-elevate\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">Weight Change</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-3xl font-bold\">\n                    {progress ? `${progress.weightChange > 0 ? '+' : ''}${progress.weightChange.toFixed(1)}` : '0.0'} kg\n                  </p>\n                  <div className=\"flex items-center gap-1 mt-2\">\n                    {progress && progress.weightChange < 0 ? (\n                      <>\n                        <TrendingDown className=\"h-4 w-4 text-green-500\" />\n                        <span className=\"text-sm text-green-500\">Losing weight</span>\n                      </>\n                    ) : progress && progress.weightChange > 0 ? (\n                      <>\n                        <TrendingUp className=\"h-4 w-4 text-orange-500\" />\n                        <span className=\"text-sm text-orange-500\">Gaining weight</span>\n                      </>\n                    ) : (\n                      <span className=\"text-sm text-muted-foreground\">No change</span>\n                    )}\n                  </div>\n                </div>\n                <Weight className=\"h-12 w-12 text-primary opacity-20\" />\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ delay: 0.3 }}\n        >\n          <Card className=\"hover-elevate\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">Total Entries</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-3xl font-bold\">{entries.length}</p>\n                  <p className=\"text-sm text-muted-foreground mt-2\">Data points tracked</p>\n                </div>\n                <Calendar className=\"h-12 w-12 text-primary opacity-20\" />\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n\n      <Tabs defaultValue=\"charts\" className=\"space-y-6\" data-testid=\"tabs-progress\">\n        <TabsList className=\"grid w-full grid-cols-2 lg:w-auto\">\n          <TabsTrigger value=\"charts\" className=\"flex items-center gap-2\" data-testid=\"tab-charts\">\n            <LineChartIcon className=\"h-4 w-4\" />\n            Charts\n          </TabsTrigger>\n          <TabsTrigger value=\"history\" className=\"flex items-center gap-2\" data-testid=\"tab-history\">\n            <Calendar className=\"h-4 w-4\" />\n            History\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"charts\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <TrendingDown className=\"h-6 w-6 text-primary\" />\n                Weight Progress\n              </CardTitle>\n              <CardDescription>Track your weight changes over time</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <AreaChart data={chartData}>\n                    <defs>\n                      <linearGradient id=\"colorWeight\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"hsl(var(--primary))\" stopOpacity={0.3}/>\n                        <stop offset=\"95%\" stopColor=\"hsl(var(--primary))\" stopOpacity={0}/>\n                      </linearGradient>\n                    </defs>\n                    <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                    <XAxis dataKey=\"date\" className=\"text-xs\" />\n                    <YAxis className=\"text-xs\" domain={['dataMin - 2', 'dataMax + 2']} />\n                    <Tooltip \n                      contentStyle={{ backgroundColor: 'hsl(var(--background))', border: '1px solid hsl(var(--border))' }}\n                      labelStyle={{ color: 'hsl(var(--foreground))' }}\n                    />\n                    <Area \n                      type=\"monotone\" \n                      dataKey=\"weight\" \n                      stroke=\"hsl(var(--primary))\" \n                      fillOpacity={1}\n                      fill=\"url(#colorWeight)\" \n                      strokeWidth={2}\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Activity className=\"h-6 w-6 text-chart-2\" />\n                BMI Trend\n              </CardTitle>\n              <CardDescription>Monitor your BMI progress</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-[300px]\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart data={chartData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                    <XAxis dataKey=\"date\" className=\"text-xs\" />\n                    <YAxis className=\"text-xs\" domain={['dataMin - 1', 'dataMax + 1']} />\n                    <Tooltip \n                      contentStyle={{ backgroundColor: 'hsl(var(--background))', border: '1px solid hsl(var(--border))' }}\n                      labelStyle={{ color: 'hsl(var(--foreground))' }}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"bmi\" \n                      stroke=\"hsl(var(--chart-2))\" \n                      strokeWidth={3}\n                      dot={{ fill: 'hsl(var(--chart-2))', r: 4 }}\n                      activeDot={{ r: 6 }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"history\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Plus className=\"h-6 w-6 text-primary\" />\n                Add New Entry\n              </CardTitle>\n              <CardDescription>Log your current weight to track progress</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex gap-4 items-end\">\n                <div className=\"flex-1\">\n                  <Label htmlFor=\"weight\">Weight (kg)</Label>\n                  <Input\n                    id=\"weight\"\n                    type=\"number\"\n                    step=\"0.1\"\n                    placeholder=\"Enter weight\"\n                    value={newWeight}\n                    onChange={(e) => setNewWeight(e.target.value)}\n                    onKeyDown={(e) => e.key === 'Enter' && addEntry()}\n                    data-testid=\"input-weight\"\n                  />\n                </div>\n                <Button onClick={addEntry} className=\"gap-2\" data-testid=\"button-add-entry\">\n                  <Plus className=\"h-4 w-4\" />\n                  Add Entry\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"h-6 w-6 text-primary\" />\n                Progress History\n              </CardTitle>\n              <CardDescription>Your complete weight tracking history</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {entries.length === 0 ? (\n                  <p className=\"text-center text-muted-foreground py-8\">No entries yet. Add your first weight entry above!</p>\n                ) : (\n                  entries.slice().reverse().map((entry, index) => {\n                    const entryBMI = getBMICategory(entry.bmi);\n                    return (\n                      <motion.div\n                        key={entry.id}\n                        initial={{ opacity: 0, y: 20 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        transition={{ delay: index * 0.05 }}\n                        className=\"flex items-center justify-between p-4 rounded-lg bg-muted/50 hover-elevate\"\n                      >\n                        <div className=\"flex items-center gap-4\">\n                          <div className={`p-2 rounded-full ${entryBMI.bgColor}`}>\n                            <Weight className={`h-5 w-5 ${entryBMI.color}`} />\n                          </div>\n                          <div>\n                            <p className=\"font-medium\">{entry.weight} kg</p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {new Date(entry.date).toLocaleDateString('en-US', { \n                                year: 'numeric', \n                                month: 'long', \n                                day: 'numeric' \n                              })}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"text-right\">\n                            <p className={`font-semibold ${entryBMI.color}`}>BMI: {entry.bmi}</p>\n                            <Badge variant=\"outline\" className=\"text-xs\">{entryBMI.category}</Badge>\n                          </div>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            onClick={() => deleteEntry(entry.id)}\n                            className=\"text-destructive hover:text-destructive\"\n                            data-testid={`button-delete-entry-${entry.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </motion.div>\n                    );\n                  })\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-br from-primary/10 via-chart-2/10 to-background border-primary/20\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Award className=\"h-6 w-6 text-primary\" />\n                Achievements & Goals\n              </CardTitle>\n              <CardDescription>Stay motivated with progress milestones</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid gap-4 sm:grid-cols-2\">\n                <div className=\"p-4 rounded-lg bg-background/50 backdrop-blur-sm border border-primary/20\">\n                  <div className=\"flex items-center gap-3 mb-2\">\n                    <Target className=\"h-5 w-5 text-primary\" />\n                    <h4 className=\"font-semibold\">Consistency Streak</h4>\n                  </div>\n                  <p className=\"text-2xl font-bold text-primary\">{entries.length} entries</p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">Keep logging to build your streak!</p>\n                </div>\n                <div className=\"p-4 rounded-lg bg-background/50 backdrop-blur-sm border border-primary/20\">\n                  <div className=\"flex items-center gap-3 mb-2\">\n                    <Activity className=\"h-5 w-5 text-chart-2\" />\n                    <h4 className=\"font-semibold\">BMI Status</h4>\n                  </div>\n                  <p className={`text-2xl font-bold ${bmiStatus.color}`}>{bmiStatus.category}</p>\n                  <p className=\"text-xs text-muted-foreground mt-1\">Current health category</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":16929},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"Inter\", \"var(--font-sans)\"],\n        heading: [\"Poppins\", \"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4109},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/examples/ThemeProvider.tsx":{"content":"import { ThemeProvider } from \"../ThemeProvider\";\n\nexport default function ThemeProviderExample() {\n  return (\n    <ThemeProvider>\n      <div className=\"p-8 bg-background text-foreground min-h-screen\">\n        <h1 className=\"text-2xl font-bold\">Theme Provider Example</h1>\n        <p className=\"mt-4\">This component wraps the app and provides theme context.</p>\n      </div>\n    </ThemeProvider>\n  );\n}\n","size_bytes":403},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/Hero.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { ArrowRight, Activity, TrendingUp, Zap } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport heroImage from \"@assets/generated_images/Health_tech_hero_background_e18f3ce9.png\";\n\nexport default function Hero() {\n  const floatingIcons = [\n    { Icon: Activity, delay: 0, x: -20, y: -30 },\n    { Icon: TrendingUp, delay: 0.2, x: 20, y: -20 },\n    { Icon: Zap, delay: 0.4, x: -30, y: 20 },\n  ];\n\n  return (\n    <div className=\"relative min-h-[calc(100vh-4rem)] flex items-center justify-center overflow-hidden\">\n      <div\n        className=\"absolute inset-0 bg-cover bg-center\"\n        style={{ backgroundImage: `url(${heroImage})` }}\n      >\n        <div className=\"absolute inset-0 bg-gradient-to-br from-background/95 via-background/85 to-background/95\" />\n      </div>\n\n      <div className=\"relative z-10 container mx-auto px-4 sm:px-6 lg:px-8 py-20\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <div className=\"relative mb-8\">\n            {floatingIcons.map(({ Icon, delay, x, y }, index) => (\n              <motion.div\n                key={index}\n                className=\"absolute hidden lg:block\"\n                initial={{ opacity: 0, scale: 0 }}\n                animate={{\n                  opacity: 0.2,\n                  scale: 1,\n                  x: [0, x, 0],\n                  y: [0, y, 0],\n                }}\n                transition={{\n                  duration: 4,\n                  delay,\n                  repeat: Infinity,\n                  repeatType: \"reverse\",\n                }}\n                style={{\n                  left: `${20 + index * 30}%`,\n                  top: `${10 + index * 15}%`,\n                }}\n              >\n                <Icon className=\"h-16 w-16 text-primary\" />\n              </motion.div>\n            ))}\n\n            <motion.h1\n              className=\"font-heading text-5xl sm:text-6xl lg:text-7xl font-bold mb-6\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.6 }}\n            >\n              <span className=\"bg-gradient-to-r from-primary via-chart-2 to-primary bg-clip-text text-transparent\">\n                Know Your Body.\n              </span>\n              <br />\n              <span className=\"text-foreground\">Master Your Health.</span>\n            </motion.h1>\n          </div>\n\n          <motion.p\n            className=\"text-lg sm:text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, delay: 0.2 }}\n            data-testid=\"text-hero-description\"\n          >\n            Experience the next generation of health insights. AI-powered BMI\n            analysis with personalized recommendations for your wellness journey.\n          </motion.p>\n\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, delay: 0.4 }}\n          >\n            <Link href=\"/calculator\">\n              <Button\n                size=\"lg\"\n                className=\"font-heading text-lg px-8 py-6 rounded-full group\"\n                data-testid=\"button-calculate-bmi\"\n              >\n                Calculate My BMI Now\n                <ArrowRight className=\"ml-2 h-5 w-5 group-hover:translate-x-1 transition-transform\" />\n              </Button>\n            </Link>\n          </motion.div>\n\n          <motion.div\n            className=\"mt-16 grid grid-cols-1 sm:grid-cols-3 gap-6 max-w-3xl mx-auto\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, delay: 0.6 }}\n          >\n            {[\n              { label: \"AI-Powered\", value: \"Insights\" },\n              { label: \"Personalized\", value: \"Tips\" },\n              { label: \"Real-time\", value: \"Analysis\" },\n            ].map((stat, index) => (\n              <div\n                key={index}\n                className=\"p-6 rounded-lg bg-card/50 backdrop-blur-sm border hover-elevate\"\n                data-testid={`stat-${stat.label.toLowerCase()}`}\n              >\n                <div className=\"text-3xl font-heading font-bold bg-gradient-to-r from-primary to-chart-2 bg-clip-text text-transparent\">\n                  {stat.value}\n                </div>\n                <div className=\"text-sm text-muted-foreground mt-1\">\n                  {stat.label}\n                </div>\n              </div>\n            ))}\n          </motion.div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4695},"client/src/pages/About.tsx":{"content":"import AboutSection from \"@/components/AboutSection\";\n\nexport default function About() {\n  return (\n    <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n      <AboutSection />\n    </div>\n  );\n}\n","size_bytes":208},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ntype ThemeContextType = {\n  theme: Theme;\n  toggleTheme: () => void;\n};\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const stored = localStorage.getItem(\"theme\");\n    return (stored as Theme) || \"light\";\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme((prev) => (prev === \"light\" ? \"dark\" : \"light\"));\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1084},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753}},"version":2}